2025-08-19T11:47:59.290Z CLI info     Config : {"userName":"nicokrause_e7ZdSC","accessKey":"Y4dYUsBFz5cWEHa5inCP","projectName":"Simple Todo Consent Screen Tests","buildName":"https://simple-todo.le-space.de","buildIdentifier":"#${BUILD_NUMBER}","platforms":[{"os":"Windows","osVersion":11,"browserName":"chrome","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"playwright-firefox","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"edge","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"chrome","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-firefox","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-webkit","browserVersion":"latest"},{"os":"Linux","osVersion":"Ubuntu 20.04","browserName":"chrome","browserVersion":"latest"},{"osVersion":12,"deviceName":"Samsung Galaxy S22","browserName":"chrome","realMobile":true},{"osVersion":16,"deviceName":"iPhone 14","browserName":"safari","realMobile":true}],"parallelsPerPlatform":2,"browserstackLocal":false,"framework":"playwright","source":"simple-todo-consent-tests:v1.0.0","debug":true,"networkLogs":true,"consoleLogs":"errors","testObservability":true}
2025-08-19T11:47:59.345Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Starting testhub from 140:0
2025-08-19T11:47:59.346Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [1ac2ace9-e186-4933-aa18-1ec2908265f0]  startBuild: payload=

{"started_at":"2025-08-19T11:47:59.346Z","host_info":{"hostname":"Nicos-MacBook-Pro-2.local","platform":"darwin","type":"Darwin","version":"Darwin Kernel Version 24.6.0: Mon Jul 14 11:28:17 PDT 2025; root:xnu-11417.140.69~1/RELEASE_X86_64","arch":"x64"},"ci_info":{"build_number":null},"version_control":{"name":"git","sha":"c9d1d82c9de444d7080b834efd53ec09fe9eeb09","short_sha":"c9d1d82c9d","branch":"main","tag":null,"committer":"Nico Krause <post@nicokrause.com>","committer_date":"2025-08-19T11:21:05.000Z","author":"Nico Krause <post@nicokrause.com>","author_date":"2025-08-19T11:21:05.000Z","commit_message":"this is mostly working on browsertack as it seems","root":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo","common_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","worktree_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","last_tag":"v0.1.13","commits_since_last_tag":8,"remotes":[{"name":"origin","url":"git@github.com:NiKrause/simple-todo.git"}]},"project_name":"Simple Todo Consent Screen Tests","name":"https://simple-todo.le-space.de","build_identifier":"#1","build_run_identifier":null,"description":"","tags":[],"failed_tests_rerun":false,"accessibility":{"settings":{}},"framework_details":{"frameworkName":"Playwright","frameworkVersion":"1.54.2","sdkVersion":"1.41.1","cliVersion":"1.6.10","language":"javascript","testFramework":{"name":"Playwright","version":"1.54.2"},"source":"simple-todo-consent-tests:v1.0.0"},"product_map":{"observability":true,"accessibility":null,"percy":false,"automate":true,"app_automate":false},"browserstackAutomation":true,"test_orchestration":{}}
2025-08-19T11:47:59.347Z CLI info  [nicokrause_e7ZdSC]   [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:00.230Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [1ac2ace9-e186-4933-aa18-1ec2908265f0]  startBuild: response=iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5
2025-08-19T11:48:00.233Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T11:48:10.748Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making GET request to https://hub.browserstack.com
2025-08-19T11:48:10.992Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making GET request to https://hub-euw.browserstack.com
2025-08-19T11:48:11.137Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making GET request to https://hub-use.browserstack.com
2025-08-19T11:48:11.687Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making GET request to https://hub-aps.browserstack.com
2025-08-19T11:48:30.014Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.514Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.251Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.514Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:48:30.256Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:30.283Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.537Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.288Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.540Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.295Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.530Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.300Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.530Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.304Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.552Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.308Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.553Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.314Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.748Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:30.318Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6c173f49-7246-488d-8d67-34aabc353591',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:48:29.615Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:31.106Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:31.191Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:31.195Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:31.125Z',
      uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:31.128Z',
      uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae'
    }
  ]
} to 140:0
2025-08-19T11:48:31.231Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 144,
    started_at: '2025-08-19T11:48:29.553Z',
    finished_at: '2025-08-19T11:48:29.697Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:32.255Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.537Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.540Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.530Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.530Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.552Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.553Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.748Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6c173f49-7246-488d-8d67-34aabc353591',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:48:29.615Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'ae0b4331-a03a-476d-b33a-2bbe8181b8ae',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 144,
      started_at: '2025-08-19T11:48:29.553Z',
      finished_at: '2025-08-19T11:48:29.697Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:48:32.260Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:33.208Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:33.361Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:33.362Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:33.276Z',
      uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:33.289Z',
      uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5'
    }
  ]
} to 140:0
2025-08-19T11:48:33.379Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 248,
    started_at: '2025-08-19T11:48:29.540Z',
    finished_at: '2025-08-19T11:48:29.788Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:34.266Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e461fa19-d48a-41c1-853e-4146cbe7e0d5',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 248,
      started_at: '2025-08-19T11:48:29.540Z',
      finished_at: '2025-08-19T11:48:29.788Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:48:34.272Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:37.759Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:37.841Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:37.842Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:37.794Z',
      uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:37.797Z',
      uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1'
    }
  ]
} to 140:0
2025-08-19T11:48:37.871Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 194,
    started_at: '2025-08-19T11:48:29.552Z',
    finished_at: '2025-08-19T11:48:29.746Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:38.257Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8083031b-48b7-47f0-9a5b-12890bdbb8c1',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 194,
      started_at: '2025-08-19T11:48:29.552Z',
      finished_at: '2025-08-19T11:48:29.746Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:48:38.259Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:39.157Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:39.381Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:39.760Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:39.761Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:39.273Z',
      uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '167f8592-2cc0-4511-b8a5-d13926aba094'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:39.462Z',
      uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '167f8592-2cc0-4511-b8a5-d13926aba094'
    }
  ]
} to 140:0
2025-08-19T11:48:39.979Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 330,
    started_at: '2025-08-19T11:48:29.530Z',
    finished_at: '2025-08-19T11:48:29.860Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:40.120Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '6c173f49-7246-488d-8d67-34aabc353591',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:40.241Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:40.243Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:39.735Z',
      uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:39.756Z',
      uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc'
    }
  ]
} to 140:0
2025-08-19T11:48:40.258Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '167f8592-2cc0-4511-b8a5-d13926aba094',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 330,
      started_at: '2025-08-19T11:48:29.530Z',
      finished_at: '2025-08-19T11:48:29.860Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '6c173f49-7246-488d-8d67-34aabc353591',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] }
] to 140:0
2025-08-19T11:48:40.261Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:48:40.282Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 594,
    started_at: '2025-08-19T11:48:29.530Z',
    finished_at: '2025-08-19T11:48:30.124Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:40.392Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:40.393Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:40.307Z',
      uuid: '6c173f49-7246-488d-8d67-34aabc353591',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6c173f49-7246-488d-8d67-34aabc353591'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:40.320Z',
      uuid: '6c173f49-7246-488d-8d67-34aabc353591',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6c173f49-7246-488d-8d67-34aabc353591'
    }
  ]
} to 140:0
2025-08-19T11:48:40.417Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6c173f49-7246-488d-8d67-34aabc353591',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 364,
    started_at: '2025-08-19T11:48:29.615Z',
    finished_at: '2025-08-19T11:48:29.979Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:42.033Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:48:42.121Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:48:42.122Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:42.067Z',
      uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:48:42.071Z',
      uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3'
    }
  ]
} to 140:0
2025-08-19T11:48:42.131Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 177,
    started_at: '2025-08-19T11:48:29.748Z',
    finished_at: '2025-08-19T11:48:29.925Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:48:42.258Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bc49790f-b9fa-44a9-a92e-f1059f488dcc',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 594,
      started_at: '2025-08-19T11:48:29.530Z',
      finished_at: '2025-08-19T11:48:30.124Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6c173f49-7246-488d-8d67-34aabc353591',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 364,
      started_at: '2025-08-19T11:48:29.615Z',
      finished_at: '2025-08-19T11:48:29.979Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a3fe26c8-e35e-4688-a04c-e49b33da12f3',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 177,
      started_at: '2025-08-19T11:48:29.748Z',
      finished_at: '2025-08-19T11:48:29.925Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:48:42.262Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:00.104Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:00.194Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:00.195Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:00.144Z',
      uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:00.148Z',
      uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8'
    }
  ]
} to 140:0
2025-08-19T11:49:00.212Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 187,
    started_at: '2025-08-19T11:48:29.537Z',
    finished_at: '2025-08-19T11:48:29.724Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:00.262Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'adf8884a-7ec5-4b4f-83dd-4622f477aff8',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 187,
      started_at: '2025-08-19T11:48:29.537Z',
      finished_at: '2025-08-19T11:48:29.724Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:00.266Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:01.714Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:01.816Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:01.817Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:01.756Z',
      uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:01.766Z',
      uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c'
    }
  ]
} to 140:0
2025-08-19T11:49:01.838Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 295,
    started_at: '2025-08-19T11:48:29.514Z',
    finished_at: '2025-08-19T11:48:29.809Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:02.262Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2018aa2e-ba04-4323-a3d3-0ca25670ed9c',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 295,
      started_at: '2025-08-19T11:48:29.514Z',
      finished_at: '2025-08-19T11:48:29.809Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:02.267Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:04.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:04.873Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:06.263Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:04.873Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:06.265Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:07.656Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:07.596Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:07.910Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:08.089Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:08.090Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:08.000Z',
      uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:08.018Z',
      uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6'
    }
  ]
} to 140:0
2025-08-19T11:49:08.102Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 476,
    started_at: '2025-08-19T11:49:04.873Z',
    finished_at: '2025-08-19T11:49:05.349Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:08.263Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:07.596Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f404b10a-f057-4050-9c14-39a5d4b86cb6',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 476,
      started_at: '2025-08-19T11:49:04.873Z',
      finished_at: '2025-08-19T11:49:05.349Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:08.269Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:12.071Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:12.181Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:12.183Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:12.116Z',
      uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:12.124Z',
      uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87'
    }
  ]
} to 140:0
2025-08-19T11:49:12.213Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 484,
    started_at: '2025-08-19T11:49:07.596Z',
    finished_at: '2025-08-19T11:49:08.080Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:12.267Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aa00b0a5-199d-401b-a775-f3b1ce3c7b87',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 484,
      started_at: '2025-08-19T11:49:07.596Z',
      finished_at: '2025-08-19T11:49:08.080Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:12.271Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:17.087Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:17.045Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:18.267Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:17.045Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:18.272Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:18.291Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:18.242Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:18.851Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:18.783Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:19.010Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:18.855Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:20.294Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:18.242Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:18.783Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:18.855Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:20.299Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:20.662Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:20.576Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:21.782Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:21.917Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:21.919Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:21.817Z',
      uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:21.841Z',
      uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4'
    }
  ]
} to 140:0
2025-08-19T11:49:21.949Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 343,
    started_at: '2025-08-19T11:49:17.045Z',
    finished_at: '2025-08-19T11:49:17.388Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:22.278Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:20.576Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fa0c9073-7d41-4150-87fb-822d8c033bc4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 343,
      started_at: '2025-08-19T11:49:17.045Z',
      finished_at: '2025-08-19T11:49:17.388Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:22.283Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:26.416Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:26.556Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:26.558Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:26.492Z',
      uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:26.497Z',
      uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e'
    }
  ]
} to 140:0
2025-08-19T11:49:26.578Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 411,
    started_at: '2025-08-19T11:49:20.576Z',
    finished_at: '2025-08-19T11:49:20.987Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:27.869Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:27.998Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:27.999Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:27.933Z',
      uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:27.947Z',
      uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5'
    }
  ]
} to 140:0
2025-08-19T11:49:28.028Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 307,
    started_at: '2025-08-19T11:49:18.242Z',
    finished_at: '2025-08-19T11:49:18.549Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:28.280Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '36147f6e-1bca-42b4-99f6-5fa6bbf3c93e',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 411,
      started_at: '2025-08-19T11:49:20.576Z',
      finished_at: '2025-08-19T11:49:20.987Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bd36186a-ff98-4805-824f-2dc76ba278f5',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 307,
      started_at: '2025-08-19T11:49:18.242Z',
      finished_at: '2025-08-19T11:49:18.549Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:28.287Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:35.595Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:35.712Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:35.713Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:35.655Z',
      uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6b65a024-7b9b-4711-be39-ad699d025832'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:35.660Z',
      uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6b65a024-7b9b-4711-be39-ad699d025832'
    }
  ]
} to 140:0
2025-08-19T11:49:35.734Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 412,
    started_at: '2025-08-19T11:49:18.855Z',
    finished_at: '2025-08-19T11:49:19.267Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:36.282Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6b65a024-7b9b-4711-be39-ad699d025832',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 412,
      started_at: '2025-08-19T11:49:18.855Z',
      finished_at: '2025-08-19T11:49:19.267Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:36.288Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:44.009Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:44.185Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:44.186Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:44.078Z',
      uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:44.081Z',
      uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb'
    }
  ]
} to 140:0
2025-08-19T11:49:44.208Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 476,
    started_at: '2025-08-19T11:49:18.783Z',
    finished_at: '2025-08-19T11:49:19.259Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:44.301Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'dd0fe482-49b0-41b2-9216-e1b638f41ccb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 476,
      started_at: '2025-08-19T11:49:18.783Z',
      finished_at: '2025-08-19T11:49:19.259Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:44.307Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:50.084Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:50.038Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:50.303Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:50.038Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:50.308Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:51.017Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:50.951Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:52.306Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:50.951Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:52.309Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:55.690Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:55.644Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:56.307Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:55.644Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:56.309Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:57.219Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:49:57.307Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:49:57.308Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:57.259Z',
      uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9ced4595-3616-44e1-9eba-00bdaebab277'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:49:57.262Z',
      uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9ced4595-3616-44e1-9eba-00bdaebab277'
    }
  ]
} to 140:0
2025-08-19T11:49:57.326Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 221,
    started_at: '2025-08-19T11:49:55.644Z',
    finished_at: '2025-08-19T11:49:55.865Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:49:58.308Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9ced4595-3616-44e1-9eba-00bdaebab277',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 221,
      started_at: '2025-08-19T11:49:55.644Z',
      finished_at: '2025-08-19T11:49:55.865Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:49:58.311Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:49:58.373Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:49:58.332Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:00.308Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:49:58.332Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:00.312Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:00.680Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:00.776Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:00.777Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:00.726Z',
      uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:00.730Z',
      uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b'
    }
  ]
} to 140:0
2025-08-19T11:50:00.799Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 290,
    started_at: '2025-08-19T11:49:50.038Z',
    finished_at: '2025-08-19T11:49:50.328Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:02.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aefca4d1-695f-410c-b810-f6bdaa96651b',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 290,
      started_at: '2025-08-19T11:49:50.038Z',
      finished_at: '2025-08-19T11:49:50.328Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:02.314Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:02.894Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:02.998Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:02.999Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:02.940Z',
      uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:02.945Z',
      uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f'
    }
  ]
} to 140:0
2025-08-19T11:50:03.018Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 261,
    started_at: '2025-08-19T11:49:58.332Z',
    finished_at: '2025-08-19T11:49:58.593Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:04.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '69a534f7-192e-4aa9-bb14-758d4caba95f',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 261,
      started_at: '2025-08-19T11:49:58.332Z',
      finished_at: '2025-08-19T11:49:58.593Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:04.316Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:05.502Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:05.441Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:06.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:05.441Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:06.312Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:09.136Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:09.097Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:09.908Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:09.974Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:09.975Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:09.934Z',
      uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:09.936Z',
      uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2'
    }
  ]
} to 140:0
2025-08-19T11:50:09.985Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 175,
    started_at: '2025-08-19T11:50:05.441Z',
    finished_at: '2025-08-19T11:50:05.616Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:10.313Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:09.097Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '033a4370-2cb0-475b-b59d-0253d6e424a2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 175,
      started_at: '2025-08-19T11:50:05.441Z',
      finished_at: '2025-08-19T11:50:05.616Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:10.316Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:10.566Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:10.527Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:12.313Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:10.527Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:12.314Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:13.208Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:13.288Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:13.290Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:13.241Z',
      uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:13.244Z',
      uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084'
    }
  ]
} to 140:0
2025-08-19T11:50:13.312Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 280,
    started_at: '2025-08-19T11:49:50.951Z',
    finished_at: '2025-08-19T11:49:51.231Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:13.501Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:13.583Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:13.584Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:13.541Z',
      uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:13.544Z',
      uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382'
    }
  ]
} to 140:0
2025-08-19T11:50:13.601Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 323,
    started_at: '2025-08-19T11:50:09.097Z',
    finished_at: '2025-08-19T11:50:09.420Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:14.313Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'ad9cc6f8-0fcb-4b4a-8f6f-409db8ea8084',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 280,
      started_at: '2025-08-19T11:49:50.951Z',
      finished_at: '2025-08-19T11:49:51.231Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '50b70ba2-81c4-4f39-a1bc-515d0cfa8382',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 323,
      started_at: '2025-08-19T11:50:09.097Z',
      finished_at: '2025-08-19T11:50:09.420Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:14.317Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:14.871Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:14.832Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:16.313Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:14.832Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:16.315Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:18.426Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:18.381Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:20.205Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:20.314Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:18.381Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
      integrations: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:20.317Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:20.350Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:20.351Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:20.306Z',
      uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:20.310Z',
      uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31'
    }
  ]
} to 140:0
2025-08-19T11:50:20.364Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 319,
    started_at: '2025-08-19T11:50:10.527Z',
    finished_at: '2025-08-19T11:50:10.846Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:22.314Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aef706b4-1f37-4156-a2c5-58f81ff7dd31',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 319,
      started_at: '2025-08-19T11:50:10.527Z',
      finished_at: '2025-08-19T11:50:10.846Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:22.317Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:28.628Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:28.709Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:28.713Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:28.659Z',
      uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:28.664Z',
      uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70'
    }
  ]
} to 140:0
2025-08-19T11:50:28.815Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 184,
    started_at: '2025-08-19T11:50:18.381Z',
    finished_at: '2025-08-19T11:50:18.565Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:30.353Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '075d4686-6fb2-400d-9fd9-f7d9e171aa70',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 184,
      started_at: '2025-08-19T11:50:18.381Z',
      finished_at: '2025-08-19T11:50:18.565Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:30.356Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:30.459Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:30.428Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:32.353Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:30.428Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:32.357Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:37.598Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T11:50:37.552Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:38.355Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T11:50:37.552Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:38.357Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:40.492Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:40.540Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:40.541Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:40.515Z',
      uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:40.516Z',
      uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217'
    }
  ]
} to 140:0
2025-08-19T11:50:40.550Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 135,
    started_at: '2025-08-19T11:50:30.428Z',
    finished_at: '2025-08-19T11:50:30.563Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:42.357Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fd482ce4-20f3-49b6-a312-3e2d4b8a7217',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 135,
      started_at: '2025-08-19T11:50:30.428Z',
      finished_at: '2025-08-19T11:50:30.563Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:42.359Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:51.317Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:51.368Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:51.371Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:51.338Z',
      uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:51.340Z',
      uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc'
    }
  ]
} to 140:0
2025-08-19T11:50:51.380Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 158,
    started_at: '2025-08-19T11:50:14.832Z',
    finished_at: '2025-08-19T11:50:14.990Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:52.361Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f3fedfc2-cae1-44c3-9456-1581b7924efc',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 158,
      started_at: '2025-08-19T11:50:14.832Z',
      finished_at: '2025-08-19T11:50:14.990Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:52.362Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:57.559Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
    integrations: { browserstack: [Object] }
  }
} to 140:0
2025-08-19T11:50:57.617Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T11:50:57.618Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:57.583Z',
      uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
      kind: 'TEST_STEP',
      message: 'browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.54.2',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T11:50:57.585Z',
      uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
      kind: 'TEST_STEP',
      message: '__browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6'
    }
  ]
} to 140:0
2025-08-19T11:50:57.631Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 156,
    started_at: '2025-08-19T11:50:37.552Z',
    finished_at: '2025-08-19T11:50:37.708Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 140:0
2025-08-19T11:50:57.805Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:58.171Z CLI error [testhub:module]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [collectBuildData] Exception in collecting build data for build UUID iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5: {"message":"Build data collection started"}
2025-08-19T11:50:58.363Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3e3ed32f-aecb-46bb-a785-a9c4882aabc6',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 156,
      started_at: '2025-08-19T11:50:37.552Z',
      finished_at: '2025-08-19T11:50:37.708Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 140:0
2025-08-19T11:50:58.364Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T11:50:58.776Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making PUT request to https://collector-observability.browserstack.com
2025-08-19T11:50:59.131Z CLI info [testhub:module]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  stopBuild: iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5 request={"finished_at":"2025-08-19T11:50:57.802Z","finished_metadata":[],"custom_metadata":{}} response={"data":""}
2025-08-19T11:50:59.137Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T11:50:59.150Z CLI info [TEST REPORTING AND ANALYTICS:module]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Visit https://automation.browserstack.com/builds/iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5 to view build report, insights, and many more debugging information all at one place!
2025-08-19T11:50:59.400Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making GET request to https://api.browserstack.com
2025-08-19T11:50:59.655Z CLI info  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  [PRODUCTION] Making POST request to https://eds.browserstack.com
2025-08-19T11:51:05.278Z CLI info [main]  [nicokrause_e7ZdSC]  [iyv2fm6vrq73dxtabpde7yc7pnb71xiyqkhcwfq5]  [1ac2ace9-e186-4933-aa18-1ec2908265f0]  Received graceful signal termination, performing cleanup
2025-08-19T12:45:47.889Z CLI info     Config : {"userName":"nicokrause_e7ZdSC","accessKey":"Y4dYUsBFz5cWEHa5inCP","projectName":"Simple Todo Consent Screen Tests","buildName":"https://simple-todo.le-space.de","buildIdentifier":"#${BUILD_NUMBER}","platforms":[{"os":"Windows","osVersion":11,"browserName":"chrome","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"playwright-firefox","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"edge","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"chrome","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-firefox","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-webkit","browserVersion":"latest"},{"os":"Linux","osVersion":"Ubuntu 20.04","browserName":"chrome","browserVersion":"latest"},{"osVersion":12,"deviceName":"Samsung Galaxy S22","browserName":"chrome","realMobile":true},{"osVersion":16,"deviceName":"iPhone 14","browserName":"safari","realMobile":true}],"parallelsPerPlatform":2,"browserstackLocal":false,"framework":"playwright","source":"simple-todo-consent-tests:v1.0.0","debug":true,"networkLogs":true,"consoleLogs":"errors","testObservability":true}
2025-08-19T12:45:48.117Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Starting testhub from 55177:0
2025-08-19T12:45:48.121Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  startBuild: payload=

{"started_at":"2025-08-19T12:45:48.119Z","host_info":{"hostname":"Nicos-MacBook-Pro-2.local","platform":"darwin","type":"Darwin","version":"Darwin Kernel Version 24.6.0: Mon Jul 14 11:28:17 PDT 2025; root:xnu-11417.140.69~1/RELEASE_X86_64","arch":"x64"},"ci_info":{"build_number":null},"version_control":{"name":"git","sha":"c9d1d82c9de444d7080b834efd53ec09fe9eeb09","short_sha":"c9d1d82c9d","branch":"main","tag":null,"committer":"Nico Krause <post@nicokrause.com>","committer_date":"2025-08-19T11:21:05.000Z","author":"Nico Krause <post@nicokrause.com>","author_date":"2025-08-19T11:21:05.000Z","commit_message":"this is mostly working on browsertack as it seems","root":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo","common_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","worktree_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","last_tag":"v0.1.13","commits_since_last_tag":8,"remotes":[{"name":"origin","url":"git@github.com:NiKrause/simple-todo.git"}]},"project_name":"Simple Todo Consent Screen Tests","name":"https://simple-todo.le-space.de","build_identifier":"#2","build_run_identifier":null,"description":"","tags":[],"failed_tests_rerun":false,"accessibility":{"settings":{}},"framework_details":{"frameworkName":"Playwright","frameworkVersion":"1.47.0","sdkVersion":"1.41.1","cliVersion":"1.6.10","language":"javascript","testFramework":{"name":"Playwright","version":"1.47.0"},"source":"simple-todo-consent-tests:v1.0.0"},"product_map":{"observability":true,"accessibility":null,"percy":false,"automate":true,"app_automate":false},"browserstackAutomation":true,"test_orchestration":{}}
2025-08-19T12:45:48.123Z CLI info  [nicokrause_e7ZdSC]   [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:45:49.171Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  startBuild: response=dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh
2025-08-19T12:45:49.178Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T12:46:30.434Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making GET request to https://hub.browserstack.com
2025-08-19T12:46:30.620Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making GET request to https://hub-euw.browserstack.com
2025-08-19T12:46:30.800Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making GET request to https://hub-use.browserstack.com
2025-08-19T12:46:31.276Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making GET request to https://hub-aps.browserstack.com
2025-08-19T12:47:36.144Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.777Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.194Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.840Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.204Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.840Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.211Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '553450be-9122-4468-9fd7-1d1922e32935',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.841Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.228Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.845Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.233Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.858Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.239Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.867Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.243Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.878Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:36.257Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:47:35.976Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:37.282Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.777Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.840Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.840Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.841Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.845Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.858Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.867Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.878Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:47:35.976Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:37.289Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:37.891Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:38.017Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:47:38.019Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:37.918Z',
      uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:37.923Z',
      uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82'
    }
  ]
} to 55177:0
2025-08-19T12:47:38.044Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 330,
    started_at: '2025-08-19T12:47:35.858Z',
    finished_at: '2025-08-19T12:47:36.188Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:39.276Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '002faaf0-d09e-47d2-b9b3-7772fb14fb82',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 330,
      started_at: '2025-08-19T12:47:35.858Z',
      finished_at: '2025-08-19T12:47:36.188Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:39.278Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:40.805Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '553450be-9122-4468-9fd7-1d1922e32935',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:41.276Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:41.279Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:41.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:43.276Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:43.280Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:46.245Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:46.631Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:46.659Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:47.135Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:47:47.136Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:42.302Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:42.911Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:43.051Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:43.449Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.458Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.525Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:47.027Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:47.028Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:47.050Z',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a'
    }
  ]
} to 55177:0
2025-08-19T12:47:47.138Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:47.172Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 6587,
    started_at: '2025-08-19T12:47:35.976Z',
    finished_at: '2025-08-19T12:47:42.563Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:47.279Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e21f7c67-c9a4-447f-8731-596a964e480a',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 6587,
      started_at: '2025-08-19T12:47:35.976Z',
      finished_at: '2025-08-19T12:47:42.563Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:48.190Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:48.344Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:49.279Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:49.281Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:53.031Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:53.283Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:53.286Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:56.004Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:56.350Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:47:56.865Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:47:56.869Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:48.961Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:51.263Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:51.376Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:52.241Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.364Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.435Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.757Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.760Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.782Z',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58'
    }
  ]
} to 55177:0
2025-08-19T12:47:56.873Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:47:56.925Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 11065,
    started_at: '2025-08-19T12:47:35.777Z',
    finished_at: '2025-08-19T12:47:46.842Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:47:57.286Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2c40a0fd-7c52-4c33-b735-573b433ffb58',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 11065,
      started_at: '2025-08-19T12:47:35.777Z',
      finished_at: '2025-08-19T12:47:46.842Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:47:57.969Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:10.635Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:10.603Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:11.306Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:10.603Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:11.308Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:13.094Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:13.173Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:13.174Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:13.125Z',
      uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:13.128Z',
      uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf'
    }
  ]
} to 55177:0
2025-08-19T12:48:13.190Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 201,
    started_at: '2025-08-19T12:48:10.603Z',
    finished_at: '2025-08-19T12:48:10.804Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:13.307Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd415ec92-e7c8-4b6e-a622-8b79f7494ccf',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 201,
      started_at: '2025-08-19T12:48:10.603Z',
      finished_at: '2025-08-19T12:48:10.804Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:13.310Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:17.461Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '553450be-9122-4468-9fd7-1d1922e32935',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:17.801Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '553450be-9122-4468-9fd7-1d1922e32935',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:18.414Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:18.274Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:18.420Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:18.425Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:41.194Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:44.923Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:44.981Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.212Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.314Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.379Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.447Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.507Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.563Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.634Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.700Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.814Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:45.916Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.019Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.135Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.206Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.265Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.340Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.411Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.468Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.700Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.778Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.839Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:18.233Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:18.245Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:18.267Z',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '553450be-9122-4468-9fd7-1d1922e32935'
    }
  ]
} to 55177:0
2025-08-19T12:48:18.428Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:18.511Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '553450be-9122-4468-9fd7-1d1922e32935',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 38644,
    started_at: '2025-08-19T12:47:35.841Z',
    finished_at: '2025-08-19T12:48:14.485Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:19.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      integrations: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:18.274Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '553450be-9122-4468-9fd7-1d1922e32935',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 38644,
      started_at: '2025-08-19T12:47:35.841Z',
      finished_at: '2025-08-19T12:48:14.485Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:19.350Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:25.712Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:25.892Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:26.251Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:26.782Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:26.812Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:26.817Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:46.997Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:50.326Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:50.436Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:51.262Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.473Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.538Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.630Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.708Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.771Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.831Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.900Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.019Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.122Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.251Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.363Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.437Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.528Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.595Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.656Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.757Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.128Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.202Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.277Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:26.660Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:26.663Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:26.684Z',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8'
    }
  ]
} to 55177:0
2025-08-19T12:48:26.819Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:26.849Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 40983,
    started_at: '2025-08-19T12:47:35.845Z',
    finished_at: '2025-08-19T12:48:16.828Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:27.168Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:27.312Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd285e276-8983-4fdf-b364-61ac8f94e5d8',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 40983,
      started_at: '2025-08-19T12:47:35.845Z',
      finished_at: '2025-08-19T12:48:16.828Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:27.492Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:27.687Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:27.694Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.409Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.743Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:53.802Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.004Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.496Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.565Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.782Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:54.931Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.021Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.086Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.148Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.225Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.317Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.410Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.515Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.586Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.646Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.706Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.765Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:55.835Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.022Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.109Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:47:56.173Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:27.580Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:27.582Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:27.603Z',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551'
    }
  ]
} to 55177:0
2025-08-19T12:48:27.717Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 35680,
    started_at: '2025-08-19T12:47:35.878Z',
    finished_at: '2025-08-19T12:48:11.558Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:27.903Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:27.983Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:29.313Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fd9c314b-7b99-434d-991f-f33ab76d8551',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 35680,
      started_at: '2025-08-19T12:47:35.878Z',
      finished_at: '2025-08-19T12:48:11.558Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:29.316Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:30.170Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:30.146Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:31.312Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:30.146Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:31.315Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:32.045Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:33.314Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:33.317Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:38.027Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:38.576Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:39.154Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:39.156Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:32.371Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:32.898Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:32.985Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.466Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.427Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.524Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.645Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.759Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.864Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:35.097Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:37.159Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:37.548Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:37.650Z',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9'
    }
  ]
} to 55177:0
2025-08-19T12:48:39.163Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:39.179Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:39.080Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:39.204Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 8435,
    started_at: '2025-08-19T12:48:18.274Z',
    finished_at: '2025-08-19T12:48:26.709Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:39.316Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:39.080Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'fa7edbc2-0f95-4bcf-8533-60c77ee443e9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 8435,
      started_at: '2025-08-19T12:48:18.274Z',
      finished_at: '2025-08-19T12:48:26.709Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:39.870Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:40.200Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:41.317Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:41.320Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:45.676Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:45.763Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:47.320Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:47.323Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:48.330Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:48.306Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:49.321Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:48.306Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:49.325Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:49.415Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:49.731Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:49.835Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:49.921Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:49.923Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:49.873Z',
      uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:49.877Z',
      uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39'
    }
  ]
} to 55177:0
2025-08-19T12:48:49.939Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 217,
    started_at: '2025-08-19T12:48:48.306Z',
    finished_at: '2025-08-19T12:48:48.523Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Linux Ubuntu 20.04-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:50.144Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:50.146Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:40.456Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:40.833Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:40.928Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:44.368Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.360Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.416Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.476Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.528Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.594Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:48.649Z',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633'
    }
  ]
} to 55177:0
2025-08-19T12:48:50.148Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:50.178Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 10976,
    started_at: '2025-08-19T12:48:39.080Z',
    finished_at: '2025-08-19T12:48:50.056Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:51.322Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
      integrations: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'f7df24e2-09b5-4f08-9c99-840c1b6bce39',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 217,
      started_at: '2025-08-19T12:48:48.306Z',
      finished_at: '2025-08-19T12:48:48.523Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '7cb9783d-1321-4a33-aecb-f61dffef0633',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 10976,
      started_at: '2025-08-19T12:48:39.080Z',
      finished_at: '2025-08-19T12:48:50.056Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:51.326Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:51.346Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:51.323Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:53.322Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:51.323Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:53.325Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:55.098Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:55.321Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:55.322Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:55.915Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:55.995Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:48:56.195Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:48:56.202Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:28.263Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:30.604Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:30.680Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:31.135Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.391Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.469Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.560Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.632Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.708Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.781Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.859Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:33.977Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.083Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.180Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.296Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.360Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.426Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.499Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.569Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.651Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:34.986Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:35.052Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:35.144Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:55.834Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'connection.dispatch',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:56.063Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:56.067Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:56.078Z',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53'
    }
  ]
} to 55177:0
2025-08-19T12:48:56.218Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 29329,
    started_at: '2025-08-19T12:47:35.840Z',
    finished_at: '2025-08-19T12:48:05.169Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:57.323Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c2b49b70-ef39-4130-8f2e-41a2a544db53',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 29329,
      started_at: '2025-08-19T12:47:35.840Z',
      finished_at: '2025-08-19T12:48:05.169Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:57.327Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:48:57.823Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:57.807Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:58.519Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:48:58.503Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:48:59.323Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:57.807Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:48:58.503Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:48:59.325Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:03.196Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:03.323Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:03.324Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:03.351Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:03.662Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:04.086Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:04.089Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:55.465Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:59.095Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:59.159Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:59.635Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:59.918Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:00.003Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:00.102Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:00.189Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:00.285Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:00.503Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.554Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.852Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.944Z',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '36a7953b-c6a9-490f-a0be-4537482857c4'
    }
  ]
} to 55177:0
2025-08-19T12:49:04.091Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:04.105Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:04.028Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:04.118Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9598,
    started_at: '2025-08-19T12:48:51.323Z',
    finished_at: '2025-08-19T12:49:00.921Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:04.528Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:05.324Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:04.028Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '36a7953b-c6a9-490f-a0be-4537482857c4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9598,
      started_at: '2025-08-19T12:48:51.323Z',
      finished_at: '2025-08-19T12:49:00.921Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:05.328Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:09.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:09.324Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:09.328Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:09.608Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:09.739Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:09.933Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:09.937Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:04.901Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:05.277Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:05.354Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:05.536Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.494Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.577Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.628Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.679Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.745Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.813Z',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8'
    }
  ]
} to 55177:0
2025-08-19T12:49:09.938Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:09.960Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 5835,
    started_at: '2025-08-19T12:49:04.028Z',
    finished_at: '2025-08-19T12:49:09.863Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:10.083Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:10.493Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:10.496Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:03.532Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:04.537Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:04.680Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:04.995Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:05.920Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:06.044Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:06.261Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:06.381Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:06.513Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:06.723Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.783Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:08.922Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:09.005Z',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80975a4c-1f33-442a-9493-3120a75752b9'
    }
  ]
} to 55177:0
2025-08-19T12:49:10.501Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:10.436Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:10.514Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 7987,
    started_at: '2025-08-19T12:48:58.503Z',
    finished_at: '2025-08-19T12:49:06.490Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:10.832Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:11.076Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:11.187Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:11.327Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd6417ca6-b3b9-44d5-b541-237a38db70e8',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 5835,
      started_at: '2025-08-19T12:49:04.028Z',
      finished_at: '2025-08-19T12:49:09.863Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:10.436Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '80975a4c-1f33-442a-9493-3120a75752b9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 7987,
      started_at: '2025-08-19T12:48:58.503Z',
      finished_at: '2025-08-19T12:49:06.490Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:11.496Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:11.791Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:11.888Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:11.890Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:46.080Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:51.061Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:52.011Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:52.856Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:01.737Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.033Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.215Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.390Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:02.573Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:03.045Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:05.115Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:09.957Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:10.207Z',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb'
    }
  ]
} to 55177:0
2025-08-19T12:49:11.896Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:11.845Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:11.905Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 31774,
    started_at: '2025-08-19T12:48:30.146Z',
    finished_at: '2025-08-19T12:49:01.920Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:12.346Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:12.803Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:13.328Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:11.845Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8647154b-2ab5-4bbf-b016-6a9d1c535fdb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 31774,
      started_at: '2025-08-19T12:48:30.146Z',
      finished_at: '2025-08-19T12:49:01.920Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:13.330Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:14.616Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:15.204Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:15.327Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:15.328Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:15.548Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:15.550Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:11.384Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:11.601Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:11.655Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:11.811Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.764Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.827Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.885Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.940Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.999Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:14.060Z',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9'
    }
  ]
} to 55177:0
2025-08-19T12:49:15.564Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 5046,
    started_at: '2025-08-19T12:49:10.436Z',
    finished_at: '2025-08-19T12:49:15.482Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:15.727Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:15.890Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:15.892Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:45.807Z',
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:45.810Z',
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:15.847Z',
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889'
    }
  ]
} to 55177:0
2025-08-19T12:49:15.903Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60098,
    started_at: '2025-08-19T12:47:35.867Z',
    finished_at: '2025-08-19T12:48:35.965Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:17.330Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'aee986bc-4fe6-4257-bc85-9dce76fde1b9',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 5046,
      started_at: '2025-08-19T12:49:10.436Z',
      finished_at: '2025-08-19T12:49:15.482Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd42c6161-48ed-40b7-a908-38a1e8728889',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60098,
      started_at: '2025-08-19T12:47:35.867Z',
      finished_at: '2025-08-19T12:48:35.965Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:17.331Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:18.757Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:19.106Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:19.329Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:19.331Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:19.410Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:19.411Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.184Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.540Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:13.602Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:14.497Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:17.726Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:17.791Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:17.857Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:17.930Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:18.004Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:18.071Z',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4'
    }
  ]
} to 55177:0
2025-08-19T12:49:19.420Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 7516,
    started_at: '2025-08-19T12:49:11.845Z',
    finished_at: '2025-08-19T12:49:19.361Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:19.724Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:19.706Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:19.730Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:19.777Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:21.331Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b9b9a039-c656-4b79-8b64-a7074688bcf4',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 7516,
      started_at: '2025-08-19T12:49:11.845Z',
      finished_at: '2025-08-19T12:49:19.361Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:19.706Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:21.334Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:28.789Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:29.333Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:29.335Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:29.378Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:29.771Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:29.775Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:20.073Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:22.125Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:22.180Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:22.597Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.199Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.372Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.459Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.537Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.623Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:25.965Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:28.025Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:28.206Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:28.333Z',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7'
    }
  ]
} to 55177:0
2025-08-19T12:49:29.782Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:29.736Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:29.791Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:29.804Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 11424,
    started_at: '2025-08-19T12:48:57.807Z',
    finished_at: '2025-08-19T12:49:09.231Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:30.157Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:31.336Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:29.736Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'eecff754-f93d-4def-ac16-bf9f036346e7',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 11424,
      started_at: '2025-08-19T12:48:57.807Z',
      finished_at: '2025-08-19T12:49:09.231Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:31.338Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:33.919Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:33.920Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:26.108Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:30.836Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:31.795Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:48:32.917Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.848Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.849Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.865Z',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7'
    }
  ]
} to 55177:0
2025-08-19T12:49:33.931Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71812,
    started_at: '2025-08-19T12:47:35.840Z',
    finished_at: '2025-08-19T12:48:47.652Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:33.954Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:34.234Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:34.552Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:34.553Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:30.451Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:30.692Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:30.774Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:30.974Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:32.965Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.042Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.119Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.197Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.263Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:33.327Z',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2'
    }
  ]
} to 55177:0
2025-08-19T12:49:34.554Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:34.575Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 4759,
    started_at: '2025-08-19T12:49:29.736Z',
    finished_at: '2025-08-19T12:49:34.495Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:34.857Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:34.839Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:35.361Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a6a69068-0d72-4190-b639-29da1f25fce7',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71812,
      started_at: '2025-08-19T12:47:35.840Z',
      finished_at: '2025-08-19T12:48:47.652Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '72e51b12-ccc6-4cd5-90fe-971f0ebb52c2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 4759,
      started_at: '2025-08-19T12:49:29.736Z',
      finished_at: '2025-08-19T12:49:34.495Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:34.839Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:35.372Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:36.229Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:37.361Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:37.362Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:46.426Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:46.718Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:47.097Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:47.099Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:36.590Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:39.853Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:39.940Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:40.159Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:42.763Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:42.975Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:43.071Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:43.162Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:43.270Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:43.578Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:45.646Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:45.800Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:45.969Z',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9'
    }
  ]
} to 55177:0
2025-08-19T12:49:47.099Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:47.110Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:47.064Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:47.118Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 11932,
    started_at: '2025-08-19T12:49:19.706Z',
    finished_at: '2025-08-19T12:49:31.638Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:47.365Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:47.064Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e0cba988-0e22-49f2-a4ba-fb9376b1ddd9',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 11932,
      started_at: '2025-08-19T12:49:19.706Z',
      finished_at: '2025-08-19T12:49:31.638Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:47.532Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:47.558Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:49.365Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:49.368Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:51.219Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:51.366Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:51.367Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:51.561Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:49:51.885Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:49:51.874Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:52.062Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:49:52.063Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:47.813Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:48.061Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:48.145Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:48.975Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.360Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.422Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.541Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.595Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.651Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:49:50.707Z',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022'
    }
  ]
} to 55177:0
2025-08-19T12:49:52.063Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:49:52.074Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 4956,
    started_at: '2025-08-19T12:49:47.064Z',
    finished_at: '2025-08-19T12:49:52.020Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:49:53.366Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      integrations: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:49:51.874Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2c0954eb-0fe1-472d-9cc1-00268abd8022',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 4956,
      started_at: '2025-08-19T12:49:47.064Z',
      finished_at: '2025-08-19T12:49:52.020Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:49:53.368Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:50:20.405Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:50:21.376Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:50:21.377Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:50:45.257Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:50:45.381Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:50:45.382Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:51:15.298Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:51:15.299Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:45.268Z',
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:45.271Z',
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:51:15.284Z',
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50'
    }
  ]
} to 55177:0
2025-08-19T12:51:15.308Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60032,
    started_at: '2025-08-19T12:49:34.839Z',
    finished_at: '2025-08-19T12:50:34.871Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:51:15.392Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '237ddcb3-0ae1-4bd5-830e-623fb4911b50',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60032,
      started_at: '2025-08-19T12:49:34.839Z',
      finished_at: '2025-08-19T12:50:34.871Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:51:15.393Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:51:25.734Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:51:25.683Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:51:27.453Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:51:25.683Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:51:27.454Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:51:28.884Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:51:28.885Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:20.755Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:25.628Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:26.616Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:50:27.780Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:51:28.853Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:51:28.854Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:51:28.863Z',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894'
    }
  ]
} to 55177:0
2025-08-19T12:51:28.891Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71910,
    started_at: '2025-08-19T12:49:51.874Z',
    finished_at: '2025-08-19T12:51:03.784Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:51:29.453Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '15355fed-3aea-4bf5-b6f9-0d4aa947b894',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71910,
      started_at: '2025-08-19T12:49:51.874Z',
      finished_at: '2025-08-19T12:51:03.784Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:51:29.454Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:51:40.021Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T12:51:40.012Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:51:41.457Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T12:51:40.012Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:51:41.459Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:52:11.771Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:52:13.466Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:52:13.467Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:52:34.956Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
    integrations: { browserstack: [Object] }
  }
} to 55177:0
2025-08-19T12:52:35.499Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      integrations: [Object]
    }
  }
] to 55177:0
2025-08-19T12:52:35.501Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:53:04.993Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:53:04.993Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:34.969Z',
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:34.970Z',
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:53:04.982Z',
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3'
    }
  ]
} to 55177:0
2025-08-19T12:53:04.998Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60029,
    started_at: '2025-08-19T12:51:25.683Z',
    finished_at: '2025-08-19T12:52:25.712Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:53:05.507Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd3b2fac1-b5da-4370-bbb7-f2cf9d6941d3',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60029,
      started_at: '2025-08-19T12:51:25.683Z',
      finished_at: '2025-08-19T12:52:25.712Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:53:05.507Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:53:20.056Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T12:53:20.056Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:12.060Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:16.960Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:17.958Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:52:19.037Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:53:20.034Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:53:20.034Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T12:53:20.041Z',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d'
    }
  ]
} to 55177:0
2025-08-19T12:53:20.060Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71762,
    started_at: '2025-08-19T12:51:40.012Z',
    finished_at: '2025-08-19T12:52:51.774Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 55177:0
2025-08-19T12:53:20.153Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:53:20.521Z CLI error [testhub:module]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [collectBuildData] Exception in collecting build data for build UUID dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh: {"message":"Build data collection started"}
2025-08-19T12:53:21.512Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '5dac767e-6e6a-4de5-8340-cb450f55812d',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71762,
      started_at: '2025-08-19T12:51:40.012Z',
      finished_at: '2025-08-19T12:52:51.774Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 55177:0
2025-08-19T12:53:21.514Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T12:53:22.031Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making PUT request to https://collector-observability.browserstack.com
2025-08-19T12:53:22.415Z CLI info [testhub:module]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  stopBuild: dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh request={"finished_at":"2025-08-19T12:53:20.152Z","finished_metadata":[],"custom_metadata":{}} response={"data":""}
2025-08-19T12:53:22.416Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T12:53:22.421Z CLI info [TEST REPORTING AND ANALYTICS:module]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Visit https://automation.browserstack.com/builds/dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh to view build report, insights, and many more debugging information all at one place!
2025-08-19T12:53:22.702Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making GET request to https://api.browserstack.com
2025-08-19T12:53:22.937Z CLI info  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  [PRODUCTION] Making POST request to https://eds.browserstack.com
2025-08-19T12:53:28.550Z CLI info [main]  [nicokrause_e7ZdSC]  [dssdle2ym4arptttbczno3rtcd8vzr1acpqxmbyh]  [ef688107-aa4a-494f-8d49-ef14bfbe37cc]  Received graceful signal termination, performing cleanup
2025-08-19T13:00:25.213Z CLI info     Config : {"userName":"nicokrause_e7ZdSC","accessKey":"Y4dYUsBFz5cWEHa5inCP","projectName":"Simple Todo Consent Screen Tests","buildName":"https://simple-todo.le-space.de","buildIdentifier":"#${BUILD_NUMBER}","platforms":[{"os":"Windows","osVersion":11,"browserName":"chrome","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"playwright-firefox","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"edge","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"chrome","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-firefox","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-webkit","browserVersion":"latest"},{"osVersion":12,"deviceName":"Samsung Galaxy S22","browserName":"chrome","realMobile":true},{"osVersion":16,"deviceName":"iPhone 14","browserName":"safari","realMobile":true}],"parallelsPerPlatform":2,"browserstackLocal":false,"framework":"playwright","source":"simple-todo-consent-tests:v1.0.0","debug":true,"networkLogs":true,"consoleLogs":"errors","testObservability":true}
2025-08-19T13:00:25.261Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Starting testhub from 68490:0
2025-08-19T13:00:25.263Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  startBuild: payload=

{"started_at":"2025-08-19T13:00:25.262Z","host_info":{"hostname":"Nicos-MacBook-Pro-2.local","platform":"darwin","type":"Darwin","version":"Darwin Kernel Version 24.6.0: Mon Jul 14 11:28:17 PDT 2025; root:xnu-11417.140.69~1/RELEASE_X86_64","arch":"x64"},"ci_info":{"build_number":null},"version_control":{"name":"git","sha":"c9d1d82c9de444d7080b834efd53ec09fe9eeb09","short_sha":"c9d1d82c9d","branch":"main","tag":null,"committer":"Nico Krause <post@nicokrause.com>","committer_date":"2025-08-19T11:21:05.000Z","author":"Nico Krause <post@nicokrause.com>","author_date":"2025-08-19T11:21:05.000Z","commit_message":"this is mostly working on browsertack as it seems","root":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo","common_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","worktree_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","last_tag":"v0.1.13","commits_since_last_tag":8,"remotes":[{"name":"origin","url":"git@github.com:NiKrause/simple-todo.git"}]},"project_name":"Simple Todo Consent Screen Tests","name":"https://simple-todo.le-space.de","build_identifier":"#3","build_run_identifier":null,"description":"","tags":[],"failed_tests_rerun":false,"accessibility":{"settings":{}},"framework_details":{"frameworkName":"Playwright","frameworkVersion":"1.47.0","sdkVersion":"1.41.1","cliVersion":"1.6.10","language":"javascript","testFramework":{"name":"Playwright","version":"1.47.0"},"source":"simple-todo-consent-tests:v1.0.0"},"product_map":{"observability":true,"accessibility":null,"percy":false,"automate":true,"app_automate":false},"browserstackAutomation":true,"test_orchestration":{}}
2025-08-19T13:00:25.263Z CLI info  [nicokrause_e7ZdSC]   [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:00:26.091Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  startBuild: response=08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4
2025-08-19T13:00:26.093Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:00:35.781Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making GET request to https://hub.browserstack.com
2025-08-19T13:00:35.945Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making GET request to https://hub-euw.browserstack.com
2025-08-19T13:00:36.095Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making GET request to https://hub-use.browserstack.com
2025-08-19T13:00:36.535Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making GET request to https://hub-aps.browserstack.com
2025-08-19T13:00:53.355Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.138Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.365Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.150Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.373Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.155Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.376Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.157Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.384Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.165Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.388Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.165Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.391Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.190Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:53.395Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:00:53.192Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:00:54.113Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.138Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.150Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.155Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.157Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.165Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.165Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.190Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:00:53.192Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:00:54.115Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:00:57.185Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:00:58.112Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:00:58.114Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:00:58.517Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:00.113Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:00.115Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:01.581Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:01.882Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:02.113Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:02.114Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:02.358Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:02.360Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:00:58.853Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:00:59.422Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:00:59.493Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:00:59.886Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:00.848Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:00.961Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.285Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.286Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.295Z',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f'
    }
  ]
} to 68490:0
2025-08-19T13:01:02.372Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 5119,
    started_at: '2025-08-19T13:00:53.150Z',
    finished_at: '2025-08-19T13:00:58.269Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:02.604Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:03.474Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:04.114Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'd17b178d-e8e8-4eee-b90d-553eae73384f',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 5119,
      started_at: '2025-08-19T13:00:53.150Z',
      finished_at: '2025-08-19T13:00:58.269Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:04.116Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:06.358Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:07.341Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:08.115Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:08.116Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:15.116Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:01:15.103Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:16.118Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:01:15.103Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:16.119Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:20.153Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:20.430Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:20.832Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:20.832Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:06.722Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.683Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.843Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:11.513Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:18.909Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:19.061Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:20.779Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:20.780Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:20.788Z',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '4a04657c-c824-40bc-804c-cedc2b36b264'
    }
  ]
} to 68490:0
2025-08-19T13:01:20.833Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:20.845Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 17305,
    started_at: '2025-08-19T13:00:53.165Z',
    finished_at: '2025-08-19T13:01:10.470Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:22.186Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '4a04657c-c824-40bc-804c-cedc2b36b264',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 17305,
      started_at: '2025-08-19T13:00:53.165Z',
      finished_at: '2025-08-19T13:01:10.470Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:22.201Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:26.061Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:26.183Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:26.184Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:33.483Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:01:33.472Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:34.140Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:34.185Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:01:33.472Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:34.187Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:34.551Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:34.701Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:34.844Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:35.369Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:35.371Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:26.398Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:26.981Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:27.039Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:27.451Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:30.947Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:31.061Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:31.171Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:31.270Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:31.381Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:31.638Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:33.761Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:34.150Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:34.248Z',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3842135c-0964-40c9-935d-3b0800f5017f'
    }
  ]
} to 68490:0
2025-08-19T13:01:35.372Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:35.383Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:01:35.184Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:35.387Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:35.389Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:00:57.507Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:01.251Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:01.314Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:01.794Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.039Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.097Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.154Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.278Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.335Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.386Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.448Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.550Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.634Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.728Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.830Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.881Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.939Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:02.987Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.039Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.087Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.328Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.431Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.491Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:35.176Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:35.180Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:35.191Z',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9'
    }
  ]
} to 68490:0
2025-08-19T13:01:35.400Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 10328,
    started_at: '2025-08-19T13:01:15.103Z',
    finished_at: '2025-08-19T13:01:25.431Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:35.405Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 38902,
    started_at: '2025-08-19T13:00:53.138Z',
    finished_at: '2025-08-19T13:01:32.040Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:35.886Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:36.063Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:36.186Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:01:35.184Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3842135c-0964-40c9-935d-3b0800f5017f',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 10328,
      started_at: '2025-08-19T13:01:15.103Z',
      finished_at: '2025-08-19T13:01:25.431Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8c14587a-1916-4d06-ae24-3dcb144f16e9',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 38902,
      started_at: '2025-08-19T13:00:53.138Z',
      finished_at: '2025-08-19T13:01:32.040Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:37.145Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:41.075Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:41.510Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:42.055Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:42.056Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:36.227Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:36.423Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:36.489Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:36.890Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:37.937Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:38.004Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:38.056Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:38.112Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:38.248Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:38.392Z',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '98569a1b-5909-4ea2-84b7-1b255807e078'
    }
  ]
} to 68490:0
2025-08-19T13:01:42.056Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:42.069Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 6823,
    started_at: '2025-08-19T13:01:35.184Z',
    finished_at: '2025-08-19T13:01:42.007Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:42.186Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '98569a1b-5909-4ea2-84b7-1b255807e078',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 6823,
      started_at: '2025-08-19T13:01:35.184Z',
      finished_at: '2025-08-19T13:01:42.007Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:42.295Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:42.417Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:42.651Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:42.920Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:43.091Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:43.386Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:43.388Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:07.672Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:08.392Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:08.467Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:08.648Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.216Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.329Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.382Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.444Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.501Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.623Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.678Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.750Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.842Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.939Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.033Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.084Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.164Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.219Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.277Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.327Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.509Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.704Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.754Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.334Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.335Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.345Z',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e'
    }
  ]
} to 68490:0
2025-08-19T13:01:43.395Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 36637,
    started_at: '2025-08-19T13:00:53.157Z',
    finished_at: '2025-08-19T13:01:29.794Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:43.502Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:43.742Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:01:43.744Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:03.912Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:06.195Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:06.272Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:06.611Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.621Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.704Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.765Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.838Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.887Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.945Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:09.993Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.087Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.192Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.273Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.371Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.426Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.476Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.720Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.767Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:10.821Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:11.102Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:11.164Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:11.239Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.678Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.679Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:43.697Z',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba'
    }
  ]
} to 68490:0
2025-08-19T13:01:43.765Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 41031,
    started_at: '2025-08-19T13:00:53.192Z',
    finished_at: '2025-08-19T13:01:34.223Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:44.249Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '5f8e02ee-4dc7-471e-a8d4-6c38399b010e',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 36637,
      started_at: '2025-08-19T13:00:53.157Z',
      finished_at: '2025-08-19T13:01:29.794Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9985d3ad-bbbb-4841-8730-96c345b892ba',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 41031,
      started_at: '2025-08-19T13:00:53.192Z',
      finished_at: '2025-08-19T13:01:34.223Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:44.494Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:45.198Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:45.717Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:46.248Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:46.248Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:53.038Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:01:53.020Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:01:54.248Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:01:53.020Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:54.249Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:54.457Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:56.249Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:56.252Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:01:57.221Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:01:58.249Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:01:58.251Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:01.143Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:01.122Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:01.171Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:01.143Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:02.252Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:01.122Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:01.143Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:02.253Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:02.930Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:03.297Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:03.756Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:03.969Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:03.722Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:03.976Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:03.978Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.536Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.290Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.345Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.734Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.092Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.197Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.305Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.445Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.574Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:59.842Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:01.915Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:02.242Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:02.317Z',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568'
    }
  ]
} to 68490:0
2025-08-19T13:02:03.979Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:04.007Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 7463,
    started_at: '2025-08-19T13:01:53.020Z',
    finished_at: '2025-08-19T13:02:00.483Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:04.200Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:04.253Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      integrations: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:03.722Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c9f414f6-8ae4-47af-b04f-48bd63595568',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 7463,
      started_at: '2025-08-19T13:01:53.020Z',
      finished_at: '2025-08-19T13:02:00.483Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:04.682Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:07.530Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:08.149Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:08.253Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:08.255Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:08.380Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:08.573Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:08.575Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:54.765Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.222Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.304Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.091Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:02.940Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.168Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.348Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.538Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.741Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:04.224Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:06.297Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:06.816Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:07.009Z',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397'
    }
  ]
} to 68490:0
2025-08-19T13:02:08.578Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:08.498Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:08.590Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 16106,
    started_at: '2025-08-19T13:01:33.472Z',
    finished_at: '2025-08-19T13:01:49.578Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:08.647Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:09.460Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:09.622Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:09.928Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:10.253Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:08.498Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a73edd90-59a6-4230-8c9b-a86b63b4f397',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 16106,
      started_at: '2025-08-19T13:01:33.472Z',
      finished_at: '2025-08-19T13:01:49.578Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:10.256Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:10.264Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:10.266Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:04.553Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:07.908Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:07.965Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.391Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.619Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.681Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.741Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.795Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.855Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.927Z',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11'
    }
  ]
} to 68490:0
2025-08-19T13:02:10.275Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 6487,
    started_at: '2025-08-19T13:02:03.722Z',
    finished_at: '2025-08-19T13:02:10.209Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:10.823Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:12.253Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '8d33e6b1-633c-4f26-8869-b614c829dd11',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 6487,
      started_at: '2025-08-19T13:02:03.722Z',
      finished_at: '2025-08-19T13:02:10.209Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:12.254Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:14.803Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:15.096Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:15.135Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:15.244Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:15.428Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:15.429Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:09.767Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:10.058Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:10.119Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:10.849Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:13.945Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:14.007Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:14.090Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:14.148Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:14.209Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:14.274Z',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64'
    }
  ]
} to 68490:0
2025-08-19T13:02:15.429Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:15.441Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 6880,
    started_at: '2025-08-19T13:02:08.498Z',
    finished_at: '2025-08-19T13:02:15.378Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:16.254Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '3536f6a3-536d-4f84-83d1-d99d25374d64',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 6880,
      started_at: '2025-08-19T13:02:08.498Z',
      finished_at: '2025-08-19T13:02:15.378Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:16.257Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:23.045Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:23.336Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:23.809Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:23.810Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:15.729Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:16.029Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:16.089Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:16.252Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:19.696Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:19.803Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:19.895Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:19.986Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:20.082Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:20.296Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:22.350Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:22.561Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:22.670Z',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb'
    }
  ]
} to 68490:0
2025-08-19T13:02:23.810Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:23.821Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:23.782Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:23.830Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9471,
    started_at: '2025-08-19T13:02:01.122Z',
    finished_at: '2025-08-19T13:02:10.593Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:24.259Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:23.782Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b8c24db9-79db-4b65-978b-f556a3bbf4cb',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9471,
      started_at: '2025-08-19T13:02:01.122Z',
      finished_at: '2025-08-19T13:02:10.593Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:24.261Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:24.367Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:26.259Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:26.260Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:26.725Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:27.040Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:27.373Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:27.374Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:24.662Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:24.880Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:24.927Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.101Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.629Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.684Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.741Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.809Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.869Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:25.959Z',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9'
    }
  ]
} to 68490:0
2025-08-19T13:02:27.375Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:27.390Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 3544,
    started_at: '2025-08-19T13:02:23.782Z',
    finished_at: '2025-08-19T13:02:27.326Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:28.259Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '19e5aa92-317f-4d53-b498-2923a8b1fdc9',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 3544,
      started_at: '2025-08-19T13:02:23.782Z',
      finished_at: '2025-08-19T13:02:27.326Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:28.388Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:28.959Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:29.523Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:29.865Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:29.949Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:29.951Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:45.795Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:48.399Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:48.496Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:52.191Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.260Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.337Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.413Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.504Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.561Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.625Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.692Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.810Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:56.957Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.057Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.138Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.205Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.264Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.323Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.375Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.433Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:57.827Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.077Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:01:58.138Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.889Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.890Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.901Z',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b'
    }
  ]
} to 68490:0
2025-08-19T13:02:29.953Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:29.970Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 45605,
    started_at: '2025-08-19T13:00:53.190Z',
    finished_at: '2025-08-19T13:01:38.795Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:30.158Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:30.261Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9b65bdfc-c893-4379-b8f1-894ec1c9b32b',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 45605,
      started_at: '2025-08-19T13:00:53.190Z',
      finished_at: '2025-08-19T13:01:38.795Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:30.540Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:30.541Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:15.576Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:20.515Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:20.824Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:21.033Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:26.029Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:26.146Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:26.286Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:26.395Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:26.515Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:27.021Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.078Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.267Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:29.383Z',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '61f92aac-e41b-420b-a260-50551f1a4619'
    }
  ]
} to 68490:0
2025-08-19T13:02:30.545Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:30.510Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:30.553Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 16129,
    started_at: '2025-08-19T13:02:01.143Z',
    finished_at: '2025-08-19T13:02:17.272Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:30.626Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:30.900Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:31.115Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:32.260Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:30.510Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '61f92aac-e41b-420b-a260-50551f1a4619',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 16129,
      started_at: '2025-08-19T13:02:01.143Z',
      finished_at: '2025-08-19T13:02:17.272Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:32.262Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:33.868Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:33.869Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.802Z',
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:03.806Z',
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:33.839Z',
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be'
    }
  ]
} to 68490:0
2025-08-19T13:02:33.884Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60139,
    started_at: '2025-08-19T13:00:53.155Z',
    finished_at: '2025-08-19T13:01:53.294Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:34.261Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '91d270d9-9579-48a6-8fb0-037b3a9883be',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60139,
      started_at: '2025-08-19T13:00:53.155Z',
      finished_at: '2025-08-19T13:01:53.294Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:34.263Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:34.994Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:35.289Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:02:35.619Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:02:35.621Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:31.366Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:31.640Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:31.712Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:31.938Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.009Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.097Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.163Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.226Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.299Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:34.350Z',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda'
    }
  ]
} to 68490:0
2025-08-19T13:02:35.622Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:35.637Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 5050,
    started_at: '2025-08-19T13:02:30.510Z',
    finished_at: '2025-08-19T13:02:35.560Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:36.268Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '700a0592-f09a-4e8e-87e3-d73962c82bda',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 5050,
      started_at: '2025-08-19T13:02:30.510Z',
      finished_at: '2025-08-19T13:02:35.560Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:36.273Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:02:51.229Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:51.218Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:51.506Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:02:51.495Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:02:52.275Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:51.218Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:02:51.495Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:02:52.276Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:14.241Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:03:14.242Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:08.751Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:11.087Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:12.125Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:02:13.235Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:14.173Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:14.174Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:14.185Z',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257'
    }
  ]
} to 68490:0
2025-08-19T13:03:14.250Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible();\n' +
        '\n' +
        '    // Check that the title is present in the modal\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 69268,
    started_at: '2025-08-19T13:00:53.165Z',
    finished_at: '2025-08-19T13:02:02.433Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:03:14.280Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e74d93ea-bbc9-4e9e-90aa-7dd92bd36257',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 69268,
      started_at: '2025-08-19T13:00:53.165Z',
      finished_at: '2025-08-19T13:02:02.433Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:14.281Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:24.277Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:24.284Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:24.285Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:27.019Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:03:27.010Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:03:28.285Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:03:27.010Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:28.287Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:32.962Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:33.236Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:33.614Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:03:33.615Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:24.588Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:25.023Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:25.097Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:25.293Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.359Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.438Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.529Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.607Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.686Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:29.949Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:32.015Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:32.159Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:32.248Z',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d'
    }
  ]
} to 68490:0
2025-08-19T13:03:33.616Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:33.623Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:03:33.595Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:03:33.628Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 32371,
    started_at: '2025-08-19T13:02:51.218Z',
    finished_at: '2025-08-19T13:03:23.589Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:03:34.268Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:34.289Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:03:33.595Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '782ed764-ef31-4a55-bc93-2e7b77ec355d',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 32371,
      started_at: '2025-08-19T13:02:51.218Z',
      finished_at: '2025-08-19T13:03:23.589Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:34.291Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:35.822Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:35.842Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:35.885Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:03:35.885Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:34.574Z',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:35.802Z',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      kind: 'TEST_STEP',
      message: 'connection.dispatch',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:35.860Z',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:35.861Z',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:35.863Z',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda'
    }
  ]
} to 68490:0
2025-08-19T13:03:35.892Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 2249,
    started_at: '2025-08-19T13:03:33.595Z',
    finished_at: '2025-08-19T13:03:35.844Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:03:36.286Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [ [Object], [Object], [Object], [Object], [Object] ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '84bb15e8-e4c0-4177-a505-4ab98674dcda',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 2249,
      started_at: '2025-08-19T13:03:33.595Z',
      finished_at: '2025-08-19T13:03:35.844Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:36.288Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:03:51.233Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:03:52.291Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:03:52.293Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:04:01.406Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:04:02.296Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:04:02.297Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:04:31.479Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:04:31.480Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:01.422Z',
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:01.426Z',
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:31.440Z',
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4'
    }
  ]
} to 68490:0
2025-08-19T13:04:31.493Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60038,
    started_at: '2025-08-19T13:02:51.495Z',
    finished_at: '2025-08-19T13:03:51.533Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:04:32.311Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c2f4f06b-e2fa-4103-ac93-48199f1e08b4',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60038,
      started_at: '2025-08-19T13:02:51.495Z',
      finished_at: '2025-08-19T13:03:51.533Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:04:32.313Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:04:51.181Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:04:51.164Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:04:52.315Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:04:51.164Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:04:52.317Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:05:10.849Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:05:10.851Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:51.628Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:56.352Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:57.345Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:58.410Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:03:59.578Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:00.763Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:01.959Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:03.158Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:04.393Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:05.635Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:08.632Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:04:09.700Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:05:10.679Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:05:10.681Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:05:10.702Z',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '05c0de22-924c-4bb8-9da6-92b20924283a'
    }
  ]
} to 68490:0
2025-08-19T13:05:10.865Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 82901,
    started_at: '2025-08-19T13:03:27.010Z',
    finished_at: '2025-08-19T13:04:49.911Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:05:12.319Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '05c0de22-924c-4bb8-9da6-92b20924283a',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 82901,
      started_at: '2025-08-19T13:03:27.010Z',
      finished_at: '2025-08-19T13:04:49.911Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:05:12.323Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:05:35.185Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:05:35.161Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:05:36.344Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:05:35.161Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:05:36.346Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:06:03.581Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:06:04.187Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
    integrations: { browserstack: [Object] }
  }
} to 68490:0
2025-08-19T13:06:04.358Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      integrations: [Object]
    }
  }
] to 68490:0
2025-08-19T13:06:04.359Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:06:33.720Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:06:33.722Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:03.628Z',
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '49b1b280-33ab-4903-9478-3f169942cbdc'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:03.630Z',
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '49b1b280-33ab-4903-9478-3f169942cbdc'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:33.667Z',
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '49b1b280-33ab-4903-9478-3f169942cbdc'
    }
  ]
} to 68490:0
2025-08-19T13:06:33.741Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60148,
    started_at: '2025-08-19T13:04:51.164Z',
    finished_at: '2025-08-19T13:05:51.312Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:06:34.367Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '49b1b280-33ab-4903-9478-3f169942cbdc',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60148,
      started_at: '2025-08-19T13:04:51.164Z',
      finished_at: '2025-08-19T13:05:51.312Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:06:34.369Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:07:12.531Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:07:12.533Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:04.539Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:09.352Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:10.346Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:06:11.471Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:07:12.390Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:07:12.393Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:07:12.430Z',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e2657250-6804-4c08-90ef-07977da6d375'
    }
  ]
} to 68490:0
2025-08-19T13:07:12.551Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n" +
        '      })).toBeVisible();\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71808,
    started_at: '2025-08-19T13:05:35.161Z',
    finished_at: '2025-08-19T13:06:46.969Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 68490:0
2025-08-19T13:07:12.957Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:07:13.574Z CLI error [testhub:module]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [collectBuildData] Exception in collecting build data for build UUID 08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4: {"message":"Build data collection started"}
2025-08-19T13:07:14.385Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e2657250-6804-4c08-90ef-07977da6d375',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71808,
      started_at: '2025-08-19T13:05:35.161Z',
      finished_at: '2025-08-19T13:06:46.969Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 68490:0
2025-08-19T13:07:14.390Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:07:15.029Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making PUT request to https://collector-observability.browserstack.com
2025-08-19T13:07:15.433Z CLI info [testhub:module]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  stopBuild: 08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4 request={"finished_at":"2025-08-19T13:07:12.940Z","finished_metadata":[],"custom_metadata":{}} response={"data":""}
2025-08-19T13:07:15.441Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:07:15.468Z CLI info [TEST REPORTING AND ANALYTICS:module]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Visit https://automation.browserstack.com/builds/08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4 to view build report, insights, and many more debugging information all at one place!
2025-08-19T13:07:15.796Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making GET request to https://api.browserstack.com
2025-08-19T13:07:16.121Z CLI info  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  [PRODUCTION] Making POST request to https://eds.browserstack.com
2025-08-19T13:07:22.102Z CLI info [main]  [nicokrause_e7ZdSC]  [08zvyspwoxallikpmfqyih1cyq5clnsyv5niwzb4]  [9e58c55e-fb51-4c79-8ea1-251ddf4b1252]  Received graceful signal termination, performing cleanup
2025-08-19T13:12:20.062Z CLI info     Config : {"userName":"nicokrause_e7ZdSC","accessKey":"Y4dYUsBFz5cWEHa5inCP","projectName":"Simple Todo Consent Screen Tests","buildName":"https://simple-todo.le-space.de","buildIdentifier":"#${BUILD_NUMBER}","platforms":[{"os":"Windows","osVersion":11,"browserName":"chrome","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"playwright-firefox","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"edge","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"chrome","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-firefox","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-webkit","browserVersion":"latest"},{"osVersion":12,"deviceName":"Samsung Galaxy S22","browserName":"chrome","realMobile":true},{"osVersion":16,"deviceName":"iPhone 14","browserName":"safari","realMobile":true}],"parallelsPerPlatform":2,"browserstackLocal":false,"framework":"playwright","source":"simple-todo-consent-tests:v1.0.0","debug":true,"networkLogs":true,"consoleLogs":"errors","testObservability":true}
2025-08-19T13:12:20.576Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [832910b8-49ee-4711-b376-991c63ac36b1]  Starting testhub from 80023:0
2025-08-19T13:12:20.580Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [832910b8-49ee-4711-b376-991c63ac36b1]  startBuild: payload=

{"started_at":"2025-08-19T13:12:20.578Z","host_info":{"hostname":"Nicos-MacBook-Pro-2.local","platform":"darwin","type":"Darwin","version":"Darwin Kernel Version 24.6.0: Mon Jul 14 11:28:17 PDT 2025; root:xnu-11417.140.69~1/RELEASE_X86_64","arch":"x64"},"ci_info":{"build_number":null},"version_control":{"name":"git","sha":"c9d1d82c9de444d7080b834efd53ec09fe9eeb09","short_sha":"c9d1d82c9d","branch":"main","tag":null,"committer":"Nico Krause <post@nicokrause.com>","committer_date":"2025-08-19T11:21:05.000Z","author":"Nico Krause <post@nicokrause.com>","author_date":"2025-08-19T11:21:05.000Z","commit_message":"this is mostly working on browsertack as it seems","root":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo","common_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","worktree_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","last_tag":"v0.1.13","commits_since_last_tag":8,"remotes":[{"name":"origin","url":"git@github.com:NiKrause/simple-todo.git"}]},"project_name":"Simple Todo Consent Screen Tests","name":"https://simple-todo.le-space.de","build_identifier":"#4","build_run_identifier":null,"description":"","tags":[],"failed_tests_rerun":false,"accessibility":{"settings":{}},"framework_details":{"frameworkName":"Playwright","frameworkVersion":"1.47.0","sdkVersion":"1.41.1","cliVersion":"1.6.10","language":"javascript","testFramework":{"name":"Playwright","version":"1.47.0"},"source":"simple-todo-consent-tests:v1.0.0"},"product_map":{"observability":true,"accessibility":null,"percy":false,"automate":true,"app_automate":false},"browserstackAutomation":true,"test_orchestration":{}}
2025-08-19T13:12:20.582Z CLI info  [nicokrause_e7ZdSC]   [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:12:21.970Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [832910b8-49ee-4711-b376-991c63ac36b1]  startBuild: response=1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks
2025-08-19T13:12:21.981Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:13:00.548Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making GET request to https://hub.browserstack.com
2025-08-19T13:13:00.723Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making GET request to https://hub-euw.browserstack.com
2025-08-19T13:13:00.902Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making GET request to https://hub-use.browserstack.com
2025-08-19T13:13:01.403Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making GET request to https://hub-aps.browserstack.com
2025-08-19T13:13:02.664Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:13:03.074Z CLI error [testhub:module]  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [collectBuildData] Exception in collecting build data for build UUID 1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks: {"message":"Build data collection started"}
2025-08-19T13:13:03.077Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making PUT request to https://collector-observability.browserstack.com
2025-08-19T13:13:03.479Z CLI info [testhub:module]  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  stopBuild: 1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks request={"finished_at":"2025-08-19T13:13:02.662Z","finished_metadata":[],"custom_metadata":{}} response={"data":""}
2025-08-19T13:13:03.496Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:13:03.506Z CLI info [TEST REPORTING AND ANALYTICS:module]  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  Visit https://automation.browserstack.com/builds/1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks to view build report, insights, and many more debugging information all at one place!
2025-08-19T13:13:03.751Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making GET request to https://api.browserstack.com
2025-08-19T13:13:03.988Z CLI info  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  [PRODUCTION] Making POST request to https://eds.browserstack.com
2025-08-19T13:13:18.430Z CLI info [main]  [nicokrause_e7ZdSC]  [1snym4baea4jr8oajzvvlovxpf9rbnjyawti4vks]  [832910b8-49ee-4711-b376-991c63ac36b1]  Received graceful signal termination, performing cleanup
2025-08-19T13:16:10.934Z CLI info     Config : {"userName":"nicokrause_e7ZdSC","accessKey":"Y4dYUsBFz5cWEHa5inCP","projectName":"Simple Todo Consent Screen Tests","buildName":"https://simple-todo.le-space.de","buildIdentifier":"#${BUILD_NUMBER}","platforms":[{"os":"Windows","osVersion":11,"browserName":"chrome","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"playwright-firefox","browserVersion":"latest"},{"os":"Windows","osVersion":11,"browserName":"edge","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"chrome","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-firefox","browserVersion":"latest"},{"os":"OS X","osVersion":"Monterey","browserName":"playwright-webkit","browserVersion":"latest"},{"osVersion":12,"deviceName":"Samsung Galaxy S22","browserName":"chrome","realMobile":true},{"osVersion":16,"deviceName":"iPhone 14","browserName":"safari","realMobile":true}],"parallelsPerPlatform":2,"browserstackLocal":false,"framework":"playwright","source":"simple-todo-consent-tests:v1.0.0","debug":true,"networkLogs":true,"consoleLogs":"errors","testObservability":true}
2025-08-19T13:16:11.078Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [437af936-8ecf-4224-a022-a33c66761b8e]  Starting testhub from 83961:0
2025-08-19T13:16:11.080Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [437af936-8ecf-4224-a022-a33c66761b8e]  startBuild: payload=

{"started_at":"2025-08-19T13:16:11.079Z","host_info":{"hostname":"Nicos-MacBook-Pro-2.local","platform":"darwin","type":"Darwin","version":"Darwin Kernel Version 24.6.0: Mon Jul 14 11:28:17 PDT 2025; root:xnu-11417.140.69~1/RELEASE_X86_64","arch":"x64"},"ci_info":{"build_number":null},"version_control":{"name":"git","sha":"c9d1d82c9de444d7080b834efd53ec09fe9eeb09","short_sha":"c9d1d82c9d","branch":"main","tag":null,"committer":"Nico Krause <post@nicokrause.com>","committer_date":"2025-08-19T11:21:05.000Z","author":"Nico Krause <post@nicokrause.com>","author_date":"2025-08-19T11:21:05.000Z","commit_message":"this is mostly working on browsertack as it seems","root":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo","common_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","worktree_git_dir":"/Users/nandi/Documents/projekte/DecentraSol/simple-todo/.git","last_tag":"v0.1.13","commits_since_last_tag":8,"remotes":[{"name":"origin","url":"git@github.com:NiKrause/simple-todo.git"}]},"project_name":"Simple Todo Consent Screen Tests","name":"https://simple-todo.le-space.de","build_identifier":"#5","build_run_identifier":null,"description":"","tags":[],"failed_tests_rerun":false,"accessibility":{"settings":{}},"framework_details":{"frameworkName":"Playwright","frameworkVersion":"1.47.0","sdkVersion":"1.41.1","cliVersion":"1.6.10","language":"javascript","testFramework":{"name":"Playwright","version":"1.47.0"},"source":"simple-todo-consent-tests:v1.0.0"},"product_map":{"observability":true,"accessibility":null,"percy":false,"automate":true,"app_automate":false},"browserstackAutomation":true,"test_orchestration":{}}
2025-08-19T13:16:11.082Z CLI info  [nicokrause_e7ZdSC]   [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:16:11.836Z CLI info [testhub:module]  [nicokrause_e7ZdSC]   [437af936-8ecf-4224-a022-a33c66761b8e]  startBuild: response=m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk
2025-08-19T13:16:11.840Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:16:28.327Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making GET request to https://hub.browserstack.com
2025-08-19T13:16:28.483Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making GET request to https://hub-euw.browserstack.com
2025-08-19T13:16:28.644Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making GET request to https://hub-use.browserstack.com
2025-08-19T13:16:29.101Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making GET request to https://hub-aps.browserstack.com
2025-08-19T13:16:48.438Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.292Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.453Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.310Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.459Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.313Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.463Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.316Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.467Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.318Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.471Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.323Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.473Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.327Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:48.478Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:16:48.337Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:49.850Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.292Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.310Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.313Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.316Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.318Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.323Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.327Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:16:48.337Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:16:49.852Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:16:53.060Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:16:53.463Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:16:53.849Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:16:53.850Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:16:56.469Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:16:56.815Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:16:57.260Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:16:57.262Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:53.769Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:54.338Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:54.404Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:54.759Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:55.785Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:55.853Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.183Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.185Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.199Z',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2'
    }
  ]
} to 83961:0
2025-08-19T13:16:57.263Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:16:57.281Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 4993,
    started_at: '2025-08-19T13:16:48.337Z',
    finished_at: '2025-08-19T13:16:53.330Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:16:57.849Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a52c5a33-a6c1-42e6-9f06-5ea2c82eefd2',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 4993,
      started_at: '2025-08-19T13:16:48.337Z',
      finished_at: '2025-08-19T13:16:53.330Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:16:58.262Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:16:59.697Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:16:59.849Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:16:59.850Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:02.156Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:03.852Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:03.853Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:09.107Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:17:09.096Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:09.855Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:17:09.096Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:09.857Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:10.066Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:10.367Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:10.987Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:17:10.988Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.742Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.862Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.947Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:07.043Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:09.271Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:09.333Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:10.950Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:10.951Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:10.959Z',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507'
    }
  ]
} to 83961:0
2025-08-19T13:17:10.988Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:11.003Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 11090,
    started_at: '2025-08-19T13:16:48.313Z',
    finished_at: '2025-08-19T13:16:59.403Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:11.857Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b4ab177d-2aa4-49b2-a855-3b66437fc507',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 11090,
      started_at: '2025-08-19T13:16:48.313Z',
      finished_at: '2025-08-19T13:16:59.403Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:12.112Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:21.234Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:17:21.225Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:21.860Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:17:21.225Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:21.861Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:25.572Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:25.861Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:25.861Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:29.195Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:29.862Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:29.863Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:32.956Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:33.245Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:33.623Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:17:33.624Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:53.387Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.212Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.270Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:16:57.404Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.360Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.411Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.461Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.508Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.561Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.608Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.660Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.739Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.816Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.908Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.964Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.011Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.061Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.114Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.187Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.235Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.420Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.474Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.520Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:33.586Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:33.587Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:33.595Z',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1ffb610d-649c-4a08-96f6-43121f00780c'
    }
  ]
} to 83961:0
2025-08-19T13:17:33.625Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:33.637Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 41312,
    started_at: '2025-08-19T13:16:48.316Z',
    finished_at: '2025-08-19T13:17:29.628Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:33.863Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1ffb610d-649c-4a08-96f6-43121f00780c',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 41312,
      started_at: '2025-08-19T13:16:48.316Z',
      finished_at: '2025-08-19T13:17:29.628Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:34.378Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:37.782Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:37.917Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:37.918Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:38.056Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:38.420Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:17:38.421Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:00.013Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.744Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:01.804Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:02.165Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.330Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.384Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.546Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.611Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.665Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.720Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.776Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.878Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:05.980Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.091Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.172Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.234Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.287Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.335Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.386Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.441Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:06.955Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:07.044Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:07.194Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.387Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.387Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.395Z',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '0f9b238d-6252-447d-837a-2129463fd27b'
    }
  ]
} to 83961:0
2025-08-19T13:17:38.422Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:38.430Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 39352,
    started_at: '2025-08-19T13:16:48.327Z',
    finished_at: '2025-08-19T13:17:27.679Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:38.661Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:39.918Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '0f9b238d-6252-447d-837a-2129463fd27b',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 39352,
      started_at: '2025-08-19T13:16:48.327Z',
      finished_at: '2025-08-19T13:17:27.679Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:39.919Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:42.622Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:17:42.615Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:43.919Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:17:42.615Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:43.920Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:46.899Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:17:46.892Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:17:47.920Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:17:46.892Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:47.921Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:49.866Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:49.921Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:49.921Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:17:58.261Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:17:59.926Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:17:59.927Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:01.662Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:01.927Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:01.928Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:02.189Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:02.809Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:02.810Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:50.152Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:53.811Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:53.895Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:54.716Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:57.584Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:57.758Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:57.890Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:58.069Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:58.254Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:58.650Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:00.701Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:01.155Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:01.317Z',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c'
    }
  ]
} to 83961:0
2025-08-19T13:18:02.810Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:02.814Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:02.793Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:02.818Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 15216,
    started_at: '2025-08-19T13:17:21.225Z',
    finished_at: '2025-08-19T13:17:36.441Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:03.039Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:03.378Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:03.927Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:02.793Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '6e9842a9-7d87-4ad4-aaf9-2678dcc2e62c',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 15216,
      started_at: '2025-08-19T13:17:21.225Z',
      finished_at: '2025-08-19T13:17:36.441Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:03.928Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:10.360Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:10.545Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:10.646Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:10.814Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:10.860Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:11.019Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:11.020Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:29.529Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:31.646Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:31.730Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:32.310Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.448Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.513Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.578Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.634Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.691Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.753Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.803Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:38.912Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.009Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.096Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.186Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.242Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.293Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.350Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.401Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.452Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.731Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.789Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.852Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.992Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.992Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:11.000Z',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11'
    }
  ]
} to 83961:0
2025-08-19T13:18:11.020Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:11.028Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 43005,
    started_at: '2025-08-19T13:16:48.323Z',
    finished_at: '2025-08-19T13:17:31.328Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:11.115Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:11.116Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:03.684Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:03.969Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:04.028Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:04.695Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:09.809Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:09.875Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:09.926Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:09.979Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.031Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.091Z',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310'
    }
  ]
} to 83961:0
2025-08-19T13:18:11.120Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 8303,
    started_at: '2025-08-19T13:18:02.793Z',
    finished_at: '2025-08-19T13:18:11.096Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:11.355Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:11.690Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:11.691Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:03.336Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:04.079Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:04.131Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:04.309Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:07.838Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:07.914Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:07.999Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:08.060Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:08.121Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:08.325Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.367Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.501Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:10.568Z',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '72dd12e5-eff9-4c2d-b006-294644e39610'
    }
  ]
} to 83961:0
2025-08-19T13:18:11.693Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:11.674Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:11.699Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9185,
    started_at: '2025-08-19T13:17:42.615Z',
    finished_at: '2025-08-19T13:17:51.800Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:11.833Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:11.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'b5045829-d0af-4a28-8b90-7962370d5f11',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 43005,
      started_at: '2025-08-19T13:16:48.323Z',
      finished_at: '2025-08-19T13:17:31.328Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'e8b608f1-30ed-4f34-8a1c-e2049209e310',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 8303,
      started_at: '2025-08-19T13:18:02.793Z',
      finished_at: '2025-08-19T13:18:11.096Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:11.674Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '72dd12e5-eff9-4c2d-b006-294644e39610',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9185,
      started_at: '2025-08-19T13:17:42.615Z',
      finished_at: '2025-08-19T13:17:51.800Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:12.244Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:12.541Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:12.975Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:13.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:13.930Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:14.145Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:14.406Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:14.756Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:14.757Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:12.573Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:12.760Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:12.811Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:12.942Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.514Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.564Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.606Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.652Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.694Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:13.738Z',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f'
    }
  ]
} to 83961:0
2025-08-19T13:18:14.757Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:14.764Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 3054,
    started_at: '2025-08-19T13:18:11.674Z',
    finished_at: '2025-08-19T13:18:14.728Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:15.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a92933d2-5fbb-4e61-a349-d4ab9eaab18f',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 3054,
      started_at: '2025-08-19T13:18:11.674Z',
      finished_at: '2025-08-19T13:18:14.728Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:15.930Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:16.146Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:17.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:17.930Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:18.237Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:18.499Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:18.847Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:18.848Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:39.004Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:42.797Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:42.850Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.221Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.517Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.568Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.623Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.671Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.725Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.786Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeDisabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.839Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:46.970Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.049Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.128Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.226Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.274Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.324Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.377Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeChecked',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.426Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeEnabled',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.478Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.701Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.757Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:47.824Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:18.822Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:18.823Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:18.828Z',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349'
    }
  ]
} to 83961:0
2025-08-19T13:18:18.849Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:18.856Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 41202,
    started_at: '2025-08-19T13:16:48.310Z',
    finished_at: '2025-08-19T13:17:29.512Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:18.884Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:18.878Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:19.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '7b19bede-ac07-49eb-9257-5cf6cb7f6349',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 41202,
      started_at: '2025-08-19T13:16:48.310Z',
      finished_at: '2025-08-19T13:17:29.512Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:18.878Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:19.930Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:21.338Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:21.929Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:21.930Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:24.197Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:24.462Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:24.825Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:24.826Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:16.462Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:16.988Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:17.040Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:17.470Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:20.948Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.036Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.132Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.211Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.304Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.509Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:23.547Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:23.867Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:23.949Z',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7'
    }
  ]
} to 83961:0
2025-08-19T13:18:24.827Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:24.831Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:24.810Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:24.837Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9866,
    started_at: '2025-08-19T13:17:09.096Z',
    finished_at: '2025-08-19T13:17:18.962Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:25.184Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:25.931Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:24.810Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a7bd4537-c9e6-4c4f-a217-f9e45b2dfab7',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9866,
      started_at: '2025-08-19T13:17:09.096Z',
      finished_at: '2025-08-19T13:17:18.962Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:25.932Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:25.981Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:25.976Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:27.932Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:25.976Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:27.932Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:28.294Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:28.294Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:58.270Z',
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:58.271Z',
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.282Z',
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d'
    }
  ]
} to 83961:0
2025-08-19T13:18:28.299Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60022,
    started_at: '2025-08-19T13:16:48.292Z',
    finished_at: '2025-08-19T13:17:48.314Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:28.832Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:28.841Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:29.101Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:29.439Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:29.440Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:25.490Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:25.687Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:25.776Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:26.104Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.053Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.101Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.153Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.207Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.259Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.314Z',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8'
    }
  ]
} to 83961:0
2025-08-19T13:18:29.440Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:29.446Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 4611,
    started_at: '2025-08-19T13:18:24.810Z',
    finished_at: '2025-08-19T13:18:29.421Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:29.814Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:29.933Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'bf140730-0c9e-4438-ac14-8539ec78fc8d',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60022,
      started_at: '2025-08-19T13:16:48.292Z',
      finished_at: '2025-08-19T13:17:48.314Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '9d1d05a3-f3f3-4750-a6bc-c5e839ca44f8',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 4611,
      started_at: '2025-08-19T13:18:24.810Z',
      finished_at: '2025-08-19T13:18:29.421Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:30.288Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:30.993Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:31.285Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:31.687Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:31.688Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:21.631Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:24.738Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:24.803Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:25.089Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:27.375Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:27.486Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:27.604Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:27.735Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:27.833Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:28.233Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.285Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.463Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.560Z',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99'
    }
  ]
} to 83961:0
2025-08-19T13:18:31.688Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:31.693Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:31.672Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:31.697Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 11285,
    started_at: '2025-08-19T13:17:46.892Z',
    finished_at: '2025-08-19T13:17:58.177Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:31.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:31.672Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '39ef1c6c-1fc1-488d-a41e-42e85315de99',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 11285,
      started_at: '2025-08-19T13:17:46.892Z',
      finished_at: '2025-08-19T13:17:58.177Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:32.014Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:32.078Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:33.793Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:33.793Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:25.885Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:30.684Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:31.715Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:17:32.803Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.768Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.768Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.775Z',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f29f486-797f-4d31-bff4-772ab151af9d'
    }
  ]
} to 83961:0
2025-08-19T13:18:33.799Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
    name: 'should display consent modal and allow proceeding after checking all boxes',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that the consent modal is visible\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).toBeVisible({\n' +
        '      timeout: 30000\n' +
        '    });\n' +
        "    await expect(modal.locator('h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check that all required checkboxes are present and initially unchecked\n' +
        `    const checkboxes = page.locator('input[type="checkbox"]').first(); // Get container for consent checkboxes\n` +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '\n' +
        '    // Verify all checkboxes are unchecked initially\n' +
        '    await expect(relayConnectionCheckbox).not.toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).not.toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).not.toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).not.toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is disabled initially\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Please check all boxes to continue/\n' +
        '    });\n' +
        '    await expect(proceedButton).toBeDisabled();\n' +
        '\n' +
        '    // Check each required checkbox\n' +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Verify all checkboxes are now checked\n' +
        '    await expect(relayConnectionCheckbox).toBeChecked();\n' +
        '    await expect(dataVisibilityCheckbox).toBeChecked();\n' +
        '    await expect(globalDatabaseCheckbox).toBeChecked();\n' +
        '    await expect(replicationTestingCheckbox).toBeChecked();\n' +
        '\n' +
        '    // Check that the proceed button is now enabled and text changed\n' +
        "    const enabledProceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await expect(enabledProceedButton).toBeEnabled();\n' +
        '\n' +
        '    // Click the proceed button\n' +
        '    await enabledProceedButton.click();\n' +
        '\n' +
        '    // Wait for modal to close and main app to be visible\n' +
        '    await expect(modal).not.toBeVisible();\n' +
        '\n' +
        '    // Check that the main app content is now visible (outside the modal)\n' +
        "    await expect(page.locator('main h1').filter({\n" +
        "      hasText: 'Simple TODO Example'\n" +
        '    })).toBeVisible();\n' +
        '\n' +
        '    // Check for the loading spinner or main app content\n' +
        "    const loadingSpinner = page.locator('text=Initializing P2P connection');\n" +
        `    const addTodoForm = page.locator('input[placeholder*="todo"], input[placeholder*="Todo"], input[placeholder*="task"]');\n` +
        '\n' +
        '    // Either loading spinner should be visible, or the todo form should be visible\n' +
        '    await expect(loadingSpinner.or(addTodoForm)).toBeVisible();\n' +
        '  }'
    },
    identifier: 'should display consent modal and allow proceeding after checking all boxes',
    scope: 'should display consent modal and allow proceeding after checking all boxes',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71739,
    started_at: '2025-08-19T13:16:48.318Z',
    finished_at: '2025-08-19T13:18:00.057Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display consent modal and allow proceeding after checking all boxes'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:33.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1f29f486-797f-4d31-bff4-772ab151af9d',
      name: 'should display consent modal and allow proceeding after checking all boxes',
      body: [Object],
      identifier: 'should display consent modal and allow proceeding after checking all boxes',
      scope: 'should display consent modal and allow proceeding after checking all boxes',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71739,
      started_at: '2025-08-19T13:16:48.318Z',
      finished_at: '2025-08-19T13:18:00.057Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:33.934Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:35.702Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:35.813Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:35.804Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:35.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      integrations: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:35.804Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:35.936Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:35.968Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:36.284Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:36.285Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:32.316Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:32.591Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:32.673Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:32.866Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.873Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.924Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:35.001Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:35.058Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:35.120Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:35.169Z',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888'
    }
  ]
} to 83961:0
2025-08-19T13:18:36.289Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 4587,
    started_at: '2025-08-19T13:18:31.672Z',
    finished_at: '2025-08-19T13:18:36.259Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:36.298Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:37.058Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:37.331Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:37.638Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:37.679Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:37.680Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:29.156Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.157Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.226Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:31.404Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.455Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.558Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.662Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.740Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:33.851Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.195Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:36.261Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:36.426Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:36.536Z',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a'
    }
  ]
} to 83961:0
2025-08-19T13:18:37.681Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:37.684Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:37.663Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:37.688Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9736,
    started_at: '2025-08-19T13:18:18.878Z',
    finished_at: '2025-08-19T13:18:28.614Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:37.910Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:37.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'c27a4758-c082-4e99-87b7-4ba9f48cd888',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 4587,
      started_at: '2025-08-19T13:18:31.672Z',
      finished_at: '2025-08-19T13:18:36.259Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:37.663Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '1f34d837-bddf-4a3a-b111-dac55d9ac36a',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9736,
      started_at: '2025-08-19T13:18:18.878Z',
      finished_at: '2025-08-19T13:18:28.614Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:38.068Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:38.124Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:38.271Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:38.272Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.109Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.807Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:30.851Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.057Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.259Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application is a demo app/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.338Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that the relay may store the entered data/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.417Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that this todo application works with one global unencrypted database/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.489Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'locator.check(label >> internal:has-text=/I understand that I need to open a second browser/ >> input[type="checkbox"])',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.618Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'locator.click(button >> internal:has-text=/Proceed to Test the App/)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:34.828Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.waitForTimeout',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:36.869Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:37.162Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'expect.not.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:37.226Z',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a987c3e2-0927-45ae-ba30-516d64619396'
    }
  ]
} to 83961:0
2025-08-19T13:18:38.274Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:38.253Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:38.277Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 9412,
    started_at: '2025-08-19T13:18:25.976Z',
    finished_at: '2025-08-19T13:18:35.388Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:38.617Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:38.619Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:39.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:38.253Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a987c3e2-0927-45ae-ba30-516d64619396',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 9412,
      started_at: '2025-08-19T13:18:25.976Z',
      finished_at: '2025-08-19T13:18:35.388Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:39.934Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:40.739Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:41.046Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:41.625Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:41.625Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:38.891Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:39.255Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:39.297Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:39.722Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:39.957Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:40.007Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:40.058Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:40.101Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:40.142Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:40.192Z',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b'
    }
  ]
} to 83961:0
2025-08-19T13:18:41.626Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:41.632Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 3351,
    started_at: '2025-08-19T13:18:38.253Z',
    finished_at: '2025-08-19T13:18:41.604Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:OSX Monterey-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:41.934Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '80c2dc4c-950b-4b15-8ea7-d83c8e72bd4b',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 3351,
      started_at: '2025-08-19T13:18:38.253Z',
      finished_at: '2025-08-19T13:18:41.604Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:42.203Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:18:42.197Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:42.571Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:43.935Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:18:42.197Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:43.936Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:48.086Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:48.342Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:18:48.664Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:18:48.664Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:38.429Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:38.671Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:38.732Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:38.936Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.016Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.088Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.322Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.378Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.429Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:18:47.490Z',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb'
    }
  ]
} to 83961:0
2025-08-19T13:18:48.665Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:18:48.672Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'passed',
    duration_in_ms: 10978,
    started_at: '2025-08-19T13:18:37.663Z',
    finished_at: '2025-08-19T13:18:48.641Z',
    failure: null,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -latest:Windows 11-browserstack consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:18:49.940Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      integrations: [Object]
    }
  },
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      integrations: [Object]
    }
  },
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: 'a3a45cdb-32f1-4ca6-9810-54b7abea1deb',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'passed',
      duration_in_ms: 10978,
      started_at: '2025-08-19T13:18:37.663Z',
      finished_at: '2025-08-19T13:18:48.641Z',
      failure: null,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:18:49.947Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:19:06.967Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:19:07.944Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:19:07.945Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:19:45.775Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:19:45.964Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:19:45.969Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:20:15.297Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:20:15.297Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:07.281Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:12.103Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:13.168Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:14.195Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: `locator.check(label >> internal:has-text=/Don\\'t show this again/ >> input[type="checkbox"])`,
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:20:15.262Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:20:15.262Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:20:15.271Z',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd'
    }
  ]
} to 83961:0
2025-08-19T13:20:15.302Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71780,
    started_at: '2025-08-19T13:18:42.197Z',
    finished_at: '2025-08-19T13:19:53.977Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:20:15.970Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '2ccf1ccb-c195-4f63-b482-99b6a8632dcd',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71780,
      started_at: '2025-08-19T13:18:42.197Z',
      finished_at: '2025-08-19T13:19:53.977Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:20:15.972Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:20:15.977Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:20:15.978Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:45.795Z',
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:19:45.796Z',
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:20:15.931Z',
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f'
    }
  ]
} to 83961:0
2025-08-19T13:20:15.989Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
    name: 'should remember consent decision when checkbox is checked',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        `    // Check the "Don't show this again" checkbox\n` +
        "    const rememberCheckbox = page.locator('label').filter({\n" +
        "      hasText: /Don't show this again/\n" +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await rememberCheckbox.check();\n' +
        '\n' +
        '    // Check all required consent checkboxes\n' +
        "    const relayConnectionCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application is a demo app/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const dataVisibilityCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that the relay may store the entered data/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const globalDatabaseCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that this todo application works with one global unencrypted database/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        "    const replicationTestingCheckbox = page.locator('label').filter({\n" +
        '      hasText: /I understand that I need to open a second browser/\n' +
        `    }).locator('input[type="checkbox"]');\n` +
        '    await relayConnectionCheckbox.check();\n' +
        '    await dataVisibilityCheckbox.check();\n' +
        '    await globalDatabaseCheckbox.check();\n' +
        '    await replicationTestingCheckbox.check();\n' +
        '\n' +
        '    // Click proceed\n' +
        "    const proceedButton = page.locator('button').filter({\n" +
        '      hasText: /Proceed to Test the App/\n' +
        '    });\n' +
        '    await proceedButton.click();\n' +
        '\n' +
        '    // Wait for the app to load\n' +
        '    await page.waitForTimeout(2000);\n' +
        '\n' +
        '    // Reload the page\n' +
        '    await page.reload();\n' +
        '\n' +
        '    // The consent modal should not appear again\n' +
        "    const modal = page.locator('div.fixed.inset-0.z-50');\n" +
        '    await expect(modal).not.toBeVisible({\n' +
        '      timeout: 5000\n' +
        '    });\n' +
        '\n' +
        '    // Clean up localStorage for next test\n' +
        '    await page.evaluate(() => {\n' +
        '      localStorage.clear();\n' +
        '    });\n' +
        '  }'
    },
    identifier: 'should remember consent decision when checkbox is checked',
    scope: 'should remember consent decision when checkbox is checked',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60043,
    started_at: '2025-08-19T13:18:35.804Z',
    finished_at: '2025-08-19T13:19:35.847Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should remember consent decision when checkbox is checked'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:20:17.971Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '533ac7ec-27d9-405f-b4cd-65a688ca001f',
      name: 'should remember consent decision when checkbox is checked',
      body: [Object],
      identifier: 'should remember consent decision when checkbox is checked',
      scope: 'should remember consent decision when checkbox is checked',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60043,
      started_at: '2025-08-19T13:18:35.804Z',
      finished_at: '2025-08-19T13:19:35.847Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:20:17.973Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:20:28.214Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:20:28.202Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:20:28.217Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunStarted',
  logs: undefined,
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: undefined,
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'pending',
    duration_in_ms: null,
    started_at: '2025-08-19T13:20:28.202Z',
    failure: undefined,
    failure_type: undefined,
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:20:29.974Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:20:28.202Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  },
  {
    event_type: 'TestRunStarted',
    logs: undefined,
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: undefined,
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'pending',
      duration_in_ms: null,
      started_at: '2025-08-19T13:20:28.202Z',
      failure: undefined,
      failure_type: undefined,
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:20:29.974Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:20:57.842Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:20:57.980Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:20:57.981Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:21:38.615Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'CBTSessionCreated',
  test_run: {
    uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
    integrations: { browserstack: [Object] }
  }
} to 83961:0
2025-08-19T13:21:40.008Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'CBTSessionCreated',
    test_run: {
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      integrations: [Object]
    }
  }
] to 83961:0
2025-08-19T13:21:40.008Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:22:05.551Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:22:05.551Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:20:58.232Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'page.goto(https://simple-todo.le-space.de)',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:21:02.448Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'page.evaluate',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:21:03.445Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'page.reload',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:21:04.517Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'expect.toBeVisible',
      level: 'failed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:22:05.502Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:22:05.503Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:22:05.510Z',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2'
    }
  ]
} to 83961:0
2025-08-19T13:22:05.554Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 71114,
    started_at: '2025-08-19T13:20:28.202Z',
    finished_at: '2025-08-19T13:21:39.316Z',
    failure: [ [Object], [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -iPhone 14:16-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:22:06.016Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  {
    event_type: 'LogCreated',
    logs: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ]
  },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '06ef6568-3b9a-4372-b827-c35d47141ae2',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 71114,
      started_at: '2025-08-19T13:20:28.202Z',
      finished_at: '2025-08-19T13:21:39.316Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:22:06.017Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:22:08.650Z CLI info [TEST REPORTING AND ANALYTICS:node]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  onLogCreatedEvent: LogCreated promise={}
2025-08-19T13:22:08.650Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'LogCreated',
  logs: [
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:21:38.626Z',
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:21:38.627Z',
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      kind: 'TEST_STEP',
      message: 'fixture: browser',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab'
    },
    {
      testFrameworkName: 'Playwright',
      testFrameworkVersion: '1.47.0',
      testFrameworkState: 'TEST',
      timestamp: '2025-08-19T13:22:08.640Z',
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      kind: 'TEST_STEP',
      message: 'fixture: __browserstack_workerHook',
      level: 'passed',
      fileName: '',
      fileSize: [Long],
      filePath: '',
      attachmentType: '',
      test_run_uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab'
    }
  ]
} to 83961:0
2025-08-19T13:22:08.653Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Added the event {
  event_type: 'TestRunFinished',
  logs: [],
  test_run: {
    type: 'test',
    framework: 'Playwright',
    uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
    name: 'should display all required consent information',
    body: {
      lang: 'javascript',
      code: 'async ({\n' +
        '    page\n' +
        '  }) => {\n' +
        '    // Navigate to the app - use deployed URL for BrowserStack, baseURL for local\n' +
        "    const testUrl = process.env.BROWSERSTACK_BUILD_NAME ? 'https://simple-todo.le-space.de' : '/';\n" +
        '    await page.goto(testUrl);\n' +
        '\n' +
        '    // Clear localStorage for BrowserStack tests to ensure modal appears\n' +
        '    if (process.env.BROWSERSTACK_BUILD_NAME) {\n' +
        '      await page.evaluate(() => localStorage.clear());\n' +
        '      await page.reload();\n' +
        '    }\n' +
        '\n' +
        '    // Check that all expected features are listed\n' +
        "    const expectedFeatures = ['Does not store any cookies or perform any tracking', 'Does not store any data in your browser\\'s storage', 'Stores data temporarily in your browser\\'s memory only', 'Does not use any application or database server', 'Connects to at least one relay server', 'The relay server may cache your entered data', 'hosted on the IPFS network'];\n" +
        '    for (const feature of expectedFeatures) {\n' +
        "      await expect(page.locator('li').filter({\n" +
        "        hasText: new RegExp(feature.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$\\\\u0026'), 'i')\n" +
        '      })).toBeVisible({\n' +
        '        timeout: 30000\n' +
        '      });\n' +
        '    }\n' +
        '  }'
    },
    identifier: 'should display all required consent information',
    scope: 'should display all required consent information',
    scopes: [ 'Consent Screen' ],
    custom_metadata: {},
    file_name: 'e2e/consent-screen.spec.js',
    vc_filepath: 'e2e/consent-screen.spec.js',
    location: 'e2e/consent-screen.spec.js',
    result: 'failed',
    duration_in_ms: 60026,
    started_at: '2025-08-19T13:20:28.202Z',
    finished_at: '2025-08-19T13:21:28.228Z',
    failure: [ [Object] ],
    failure_type: 'UnhandledError',
    failure_reason: null,
    retry_of: null,
    tags: [],
    customRerunParam: {
      rerun_name: ' -Samsung Galaxy S22:12-browserstack-mobile consent-screen.spec.js Consent Screen should display all required consent information'
    },
    hooks: [],
    product_map: {
      observability: true,
      accessibility: false,
      percy: false,
      automate: true,
      app_automate: false
    }
  }
} to 83961:0
2025-08-19T13:22:08.736Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:22:09.103Z CLI error [testhub:module]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [collectBuildData] Exception in collecting build data for build UUID m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk: {"message":"Build data collection started"}
2025-08-19T13:22:10.021Z CLI info [testhub:request-queue-handler]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Processing batch event [
  { event_type: 'LogCreated', logs: [ [Object], [Object], [Object] ] },
  {
    event_type: 'TestRunFinished',
    logs: [],
    test_run: {
      type: 'test',
      framework: 'Playwright',
      uuid: '86bbb94c-59c1-44ba-ba20-8875edfc5fab',
      name: 'should display all required consent information',
      body: [Object],
      identifier: 'should display all required consent information',
      scope: 'should display all required consent information',
      scopes: [Array],
      custom_metadata: {},
      file_name: 'e2e/consent-screen.spec.js',
      vc_filepath: 'e2e/consent-screen.spec.js',
      location: 'e2e/consent-screen.spec.js',
      result: 'failed',
      duration_in_ms: 60026,
      started_at: '2025-08-19T13:20:28.202Z',
      finished_at: '2025-08-19T13:21:28.228Z',
      failure: [Array],
      failure_type: 'UnhandledError',
      failure_reason: null,
      retry_of: null,
      tags: [],
      customRerunParam: [Object],
      hooks: [],
      product_map: [Object]
    }
  }
] to 83961:0
2025-08-19T13:22:10.022Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://collector-observability.browserstack.com
2025-08-19T13:22:10.519Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making PUT request to https://collector-observability.browserstack.com
2025-08-19T13:22:10.897Z CLI info [testhub:module]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  stopBuild: m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk request={"finished_at":"2025-08-19T13:22:08.735Z","finished_metadata":[],"custom_metadata":{}} response={"data":""}
2025-08-19T13:22:10.898Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://api.browserstack.com
2025-08-19T13:22:10.901Z CLI info [TEST REPORTING AND ANALYTICS:module]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Visit https://automation.browserstack.com/builds/m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk to view build report, insights, and many more debugging information all at one place!
2025-08-19T13:22:11.154Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making GET request to https://api.browserstack.com
2025-08-19T13:22:11.369Z CLI info  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  [PRODUCTION] Making POST request to https://eds.browserstack.com
2025-08-19T13:22:20.028Z CLI info [main]  [nicokrause_e7ZdSC]  [m6cx9gm1ce69czqidgf8slyshlkwy6yiut181jvk]  [437af936-8ecf-4224-a022-a33c66761b8e]  Received graceful signal termination, performing cleanup
