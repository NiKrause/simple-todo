name: BrowserStack Cross-Browser Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  browserstack-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        # Test in smaller batches to avoid overwhelming BrowserStack
        batch: [1, 2, 3]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps
    
    - name: Build application
      run: pnpm run build
    
    - name: Start application server
      run: |
        pnpm run preview &
        # Wait for server to be ready
        npx wait-on http://localhost:4173 --timeout 60000
      env:
        CI: true
    
    - name: Run BrowserStack tests - Batch ${{ matrix.batch }}
      run: |
        case ${{ matrix.batch }} in
          1)
            # Desktop browsers - Windows & Linux
            pnpm exec playwright test --project="Chrome Windows" --project="Firefox Windows" --project="Edge Windows" --project="Chrome Linux"
            ;;
          2)
            # Desktop browsers - macOS & Opera
            pnpm exec playwright test --project="Chrome macOS" --project="Firefox macOS" --project="Safari macOS" --project="Opera Windows"
            ;;
          3)
            # Mobile browsers
            pnpm exec playwright test --project="iPhone Safari" --project="Android Chrome"
            ;;
        esac
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        BROWSERSTACK_BUILD_NAME: "simple-todo-consent-${{ github.sha }}-batch-${{ matrix.batch }}"
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: browserstack-results-batch-${{ matrix.batch }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-batch-${{ matrix.batch }}
        path: playwright-report/
        retention-days: 30

  # Job to run local tests (fallback and for PR validation)
  local-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps
    
    - name: Build application
      run: pnpm run build
    
    - name: Run local Playwright tests
      run: pnpm exec playwright test
      env:
        CI: true
    
    - name: Upload local test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: local-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Job to combine and report results
  report-results:
    runs-on: ubuntu-latest
    needs: [browserstack-tests, local-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-results
    
    - name: Report summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## BrowserStack Tests" >> $GITHUB_STEP_SUMMARY
        
        for batch in 1 2 3; do
          if [ -d "all-results/browserstack-results-batch-$batch" ]; then
            echo "- ✅ Batch $batch completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Batch $batch failed or not found" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Local Tests" >> $GITHUB_STEP_SUMMARY
        if [ -d "all-results/local-test-results" ]; then
          echo "- ✅ Local tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Local tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Tested Browsers" >> $GITHUB_STEP_SUMMARY
        echo "- Chrome on Windows 11, macOS Monterey, Linux Ubuntu 20.04" >> $GITHUB_STEP_SUMMARY
        echo "- Firefox on Windows 11, macOS Monterey" >> $GITHUB_STEP_SUMMARY
        echo "- Edge on Windows 11" >> $GITHUB_STEP_SUMMARY
        echo "- Opera on Windows 11" >> $GITHUB_STEP_SUMMARY
        echo "- Safari on macOS Monterey, iPhone 14" >> $GITHUB_STEP_SUMMARY
        echo "- Chrome on Android (Samsung Galaxy S22)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: Brave browser testing requires local setup as it's not available on standard BrowserStack plans."
